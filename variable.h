//--------------------------------------------------------------------------
// variable.h
// Description: define global variable structures
//				define constant
// Copyright 2009 @ Teleview
// Author: Yuri Cho
// Created: 2009.04.28

// IMPORT: variable.bas
//		   dlldecl.bas
//		   main.bas
//--------------------------------------------------------------------------

#ifndef	_TELVIEW_VARIABLE_H_
#define _TELVIEW_VARIABLE_H_

#if defined(WIN32)
#else
#include <sys/socket.h>
#define SOCKET		int
#define __int64		int64_t
#define RegistryKey FILE *
#define HANDLE  	int
#define DWORD		unsigned int
#define WORD		unsigned short
#define Sleep(n)	do { usleep(n * 1000); } while (0)

#define INVALID_SOCKET	-1
#define WINSOCK_VERSION 202
#define WSADATA			int
#define OutputDebugString(a)	printf(a)
#endif

#ifndef WIN32
#define _DEBUG
#ifdef _DEBUG
extern void DebugOutEx(char *szFormat, ...);
#else
extern void DebugOutEx(char *szFormat, ...);
#endif
#endif
//--------------------------------------------------------------------------
// Constant Definition
//--------------------------------------------------------------------------
//--- variables
//-----------------------------
#define RF_LEVEL_OFFSET_FILE_NAME "LEVEL_OFFSET_TABLE"

#ifdef WIN32
#define MAX_BOARD_COUNT			23			// 
#else
#define MAX_BOARD_COUNT			12			// 
#endif
#define MAX_REAL_VIR_BD_CNT		4

#define MIN_BANK_COUNT			0
#define MAX_BANK_COUNT			7
#define MIN_BANK_OFFSET			32
#define MAX_BANK_OFFSET			1024

#ifdef WIN32
#define MAX_PLAY_LIST_COUNT		20
#else
#define MAX_PLAY_LIST_COUNT		100
#endif

#define VLC_VIDEO_WIDTH_S		100
#define VLC_VIDEO_HEIGHT_S		65
#define VLC_VIDEO_WIDTH_L		640
#define VLC_VIDEO_HEIGHT_L		480
#define VLC_VIDEO_WIDTH_M		(640 - 394)
#define VLC_VIDEO_HEIGHT_M		(480 - 275)

//---------------------------------------------------
// 20090812
#define QAM_A_SYMBOL_MIN					1000000 
#define QAM_A_SYMBOL_MAX					7200000 
#define DVB_S_SYMBOL_RRC_OFF_MIN			1000000
#define DVB_S_SYMBOL_RRC_OFF_MAX			45000000
#define DVB_S_SYMBOL_RRC_ON_MIN				1000000
#define DVB_S_SYMBOL_RRC_ON_MAX				22000000
#define DVB_S2_SYMBOL_RRC_OFF_MIN			2000000
#define DVB_S2_SYMBOL_RRC_OFF_MAX			45000000
#define DVB_S2_SYMBOL_RRC_OFF_IF_44_MIN		2000000
#define DVB_S2_SYMBOL_RRC_OFF_IF_44_MAX		25000000
#define DVB_S2_SYMBOL_RRC_ON_MIN			2000000
#define DVB_S2_SYMBOL_RRC_ON_MAX			22000000
//TVB590S(20)
#define DVB_S_SYMBOL_RRC_OFF_20_MIN  1000000
#define DVB_S_SYMBOL_RRC_OFF_20_MAX  45000000
#define DVB_S2_SYMBOL_RRC_ON_20_MIN  1000000
#define DVB_S2_SYMBOL_RRC_ON_20_MAX  45000000
#define DVB_S_SYMBOL_RRC_OFF_11_MIN  1000000
#define DVB_S2_SYMBOL_RRC_ON_11_MIN  1000000
#define DVB_S_SYMBOL_RRC_OFF_11_MAX  70000000
#define DVB_S2_SYMBOL_RRC_ON_11_MAX  70000000
//2010/7/18 I/Q PLAY/CAPTURE
//#define IQ_PLAY_SYMBOL_MIN  4000000
//#define IQ_PLAY_SYMBOL_MAX  15000000
#define IQ_PLAY_SYMBOL_MIN  0
#define IQ_PLAY_SYMBOL_MAX  150000000

//2011/10/20 TVB591
#define RF_TVB591_MIN			48000000
#define RF_TVB591_MAX			900000000

//2010/9/17 FIXED - ROWSWIN offset, 55M->48M
#define RF_47_MIN			48000000
#define RF_47_MAX			2150000000
#define RF_47_MIN_DVB_S		950000000
#define RF_47_MAX_DVB_S		2150000000

//2010/9/17 FIXED - ROWSWIN offset, 55M->48M
#define RF_44_MIN				48000000
#define RF_44_MAX				867000000
#define RF_44_MIN_H				1036000000
#define RF_44_MAX_H				1750000000
//2010/9/17 FIXED - ROWSWIN offset, 55M->48M
#define RF_44_MIN_IF_44			48000000
#define RF_44_MAX_IF_44			867000000
#define RF_44_MIN_H_IF_44		1044000000
#define RF_44_MAX_H_IF_44		1750000000
#define RF_44_MIN_DVB_S			1036000000
#define RF_44_MAX_DVB_S			1750000000
#define RF_44_MIN_IF_44_DVB_S   1044000000
#define RF_44_MAX_IF_44_DVB_S   1750000000

//2010/9/17 FIXED - ROWSWIN offset, 55M->48M
#define RF_41_MIN			48000000
#define RF_41_MAX			867000000
#define RF_41_MIN_DVB_S		1036000000
#define RF_41_MAX_DVB_S		1700000000
//2010/9/17 FIXED - ROWSWIN offset, 55M->48M
#define RF_41_MIN_TDMB		48000000
#define RF_41_MAX_TDMB		1700000000

#define RF_43_MIN			57000000
#define RF_43_MAX			79000000

#define RF_MIN				470000000
#define RF_MAX				867000000
#define RF_MIN_DVB_S		470000000
#define RF_MAX_DVB_S		1000000000

//TVB590S(20)
#define RF_20_MIN			500000000
#define RF_20_MAX			2000000000


#define RF_MIN_HMC833		        36000000
#define RF_MAX_HMC833		2300000000


//2011/5/30 DAC FREQ RANGE
#define MAX_DAC_FREQ_RANGE      22
#define MAX_DAC_FREQ_RANGE_V3   49
#define MAX_DAC_FREQ_RANGE_V4   68

//----------------------------------------------------------------
#define MAX_SCHEDULE_COUNT		5

//--- dlldecl
#define MIN_PRBS_SCALE			-70.0
#define MAX_PRBS_SCALE			20.0
#define MAX_PRBS_SCALE_TDMB		20.0
#define MIN_CELL_ID				0
#define MAX_CELL_ID				65535
#define MIN_ATTEN				0
#define MAX_ATTEN				31.5

#define MAX_PORT				65535
#define MAX_EXT_ATTEN			127
#define MIN_CNR					0.0
#define MAX_CNR					50.0
//---Encoding
#define ENCODING_EUC_KR         51949
#define ENCODING_UTF_16			1200
#define ENCODING_UTF_8			65001

//-------------------------------------
//ADD kslee
#define INDEX_COL_A				6
#define INDEX_COL_B				7
#define INDEX_COL_C				8

//-------------------------------------
// maybe not used
#define MenuX					30
#define MenuY					17
#define MenuW					50
#define MenuH					17
#define MENU_W					95
#define MENU_H					16

//vlc1.0.4
#define VLC_INPUT_BITRATE_CHECK_COUNT	50
#define FIXED_PLAY_RATE_ISDB_T			32507936
#define MAX_PLAY_RATE_BOUNDARY_ISDB_T	32508000


//2010/12/06 ISDB-S ==========================================================
#define MAX_TS_COUNT 8
#define MAX_SLOT_COUNT 48
//============================================================================

//2010/12/20 DVB-T2 MULTI-PLP =================================================
#define MAX_PLP_TS_COUNT 8

#define PLP_ID_POS   0
#define PLP_MOD_POS  1
#define PLP_COD_POS	 2
#define PLP_FEC_POS  3
#define PLP_BLK_POS  4
#define PLP_HEM_POS  5
#define PLP_ROT_POS  6
#define PLP_TIME_IL_LENGTH_POS   7
#define PLP_TS_POS   8
#define PLP_BIT_POS  9
#define PLP_PLPBIT_POS 10
//#define GRID_PLP_ROW_HEIGHT 23
//#define GRID_PLP_COL_WIDTH_ID 30
//#define GRID_PLP_COL_WIDTH_MOD 80
//#define GRID_PLP_COL_WIDTH_COD 70
//#define GRID_PLP_COL_WIDTH_FEC 50
//=============================================================================
//2013/3/5 DTMB added bandwidth
#define DTMB_SYMBOL_8M 7560000

//2011/5/17 DVB-C2 MULTI-PLP ==================================================
#define DVB_C2_MAX_PLP_TS_COUNT			10
#define DVB_C2_PLP_ID_POS				0
//#define DVB_C2_PLP_DSLICE_TYPE_POS		1
//#define DVB_C2_PLP_FEC_HEADER_TYPE_POS  2
#define DVB_C2_PLP_MOD_POS				1
#define DVB_C2_PLP_COD_POS				2
#define DVB_C2_PLP_FEC_POS				3
#define DVB_C2_PLP_BLK_POS				4
#define DVB_C2_PLP_HEM_POS				5
#define DVB_C2_PLP_TS_POS				6
#define DVB_C2_PLP_BIT_POS				7
#define DVB_C2_PLP_PLPBIT_POS			8

//#define DVB_C2_PLP_ID_COL_WIDTH			30
//#define DVB_C2_PLP_DSTYPE_COL_WIDTH     50
//#define DVB_C2_PLP_FEC_H_T_COL_WIDTH    60
//#define DVB_C2_PLP_MOD_COL_WIDTH	    70
//#define DVB_C2_PLP_COD_COL_WIDTH	    50
//#define DVB_C2_PLP_FEC_COL_WIDTH	    50
//#define DVB_C2_PLP_BLK_COL_WIDTH	    50
//#define DVB_C2_PLP_HEM_COL_WIDTH	    35
//=============================================================================

#define _TVB594_BD_ID_	0x50

//2012/8/7 SI/PID improve	======================================================
#define TSPH_TS_FLAG_PAT_IN_TS			0x00000001
#define TSPH_TS_FLAG_PMT_IN_TS			0x00000002
#define TSPH_TS_FLAG_NIT_IN_TS			0x00000004
#define TSPH_TS_FLAG_ALL_PMT_IN_TS		0x00000008
	// Not Set when TSPH_TS_FLAG_PAT_IN_TS Not Set
#define TSPH_TS_FLAG_PCR_IN_TS			0x00000100
#define TSPH_TS_FLAG_OUT_OF_SYNC_IN_TS	0x00000200

#define TSPH_TS_NIT_FLAG_CABLE_DELIVERY_SYSTEM_DESC_IN_TS			0x00000001
#define TSPH_TS_NIT_FLAG_SATELLITE_DELIVERY_SYSTEM_DESC_IN_TS		0x00000002
#define TSPH_TS_NIT_FLAG_S2_SATELLITE_DELIVERY_SYSTEM_DESC_IN_TS	0x00000004
#define TSPH_TS_NIT_FLAG_TERRESTRIAL_DELIVERY_SYSTEM_DESC_IN_TS		0x00000008

#define TSPH_TS_STREAM_TYPE_STR_MAX_SIZE	256
#define TSPH_TS_PID_DESC_STR_MAX_SIZE		32
//================================================================================

#define FILE_INVALID_FORMAT -2
#define FILE_INVALID_BITRATE -1

//--------------------------------------------------------------------------
// Enumeration
//--------------------------------------------------------------------------
typedef enum _tKeyCode
{
    TPG_KEY_NONE = 0,                // no key is pressed

    TPG_KEY_NUM_1 = 36,              //0x24
    TPG_KEY_NUM_2 = 37,              //0x25
    TPG_KEY_NUM_3 = 38,              //0x26
    TPG_KEY_NUM_4 = 42,              //0x2A
    TPG_KEY_NUM_5 = 43,              //0x2B
    TPG_KEY_NUM_6 = 44,              //0x2C
    TPG_KEY_NUM_7 = 48,              //0x30
    TPG_KEY_NUM_8 = 49,              //0x31
    TPG_KEY_NUM_9 = 50,              //0x32
    TPG_KEY_NUM_0 = 54,              //0x36
    TPG_KEY_NUM_DOT = 55,            //0x37
    TPG_KEY_NUM_SIGN = 56,           //0x38
    TPG_KEY_SELECT = 57,             //0x39
    
    TPG_KEY_F1 = 58,                 //0x3A
    TPG_KEY_F2 = 59,                 //0x3B
    TPG_KEY_F3 = 60,                 //0x3C
    TPG_KEY_F4 = 61,                 //0x3D
    TPG_KEY_F5 = 62,                 //0x3E
    TPG_KEY_F6 = 63,                 //0x3F
    
    TPG_KEY_D1 = 64,                //0x40
    TPG_KEY_D2 = 65,                 //0x41
    TPG_KEY_D3 = 66,                 //0x42
    TPG_KEY_D4 = 67,                 //0x43
    TPG_KEY_D5 = 68,                 //0x44
    TPG_KEY_D6 = 69,                 //0x45
    
    TPG_KEY_ADD = 28,                //0x1C
    TPG_KEY_PLAY = 29,               //0x1D
    TPG_KEY_DELETE = 34,             //0x22
    TPG_KEY_STOP = 35,               //0x23
    TPG_KEY_MODE = 40,               //0x28
    TPG_KEY_HELP = 41,               //0x29
    TPG_KEY_LEFT = 46,               //0x2E
    TPG_KEY_RIGHT = 47,              //0x2F
    TPG_KEY_UP = 53,                 //0x35
    TPG_KEY_DOWN = 52,               //0x34
    
    TPG_KEY_MHZ = 39,                //0x27
    TPG_KEY_KHZ = 45,                //0x2D
    TPG_KEY_HZ = 51,                 //0x33
    
    TPG_KEY_KNOB_DOWN = 22,          //0x16
    TPG_KEY_KNOB_UP = 23,            //0x17
    
    TPG_KEY_MENU_SOURCE = 24,        //0x18
    TPG_KEY_MENU_SI = 25,            //0x19
    TPG_KEY_MENU_PID = 26,           //0x1A
    TPG_KEY_MENU_SETUP = 27,         //0x1B
    TPG_KEY_MENU_PICTURE = 30,       //0x1E
    TPG_KEY_MENU_MEASURE = 31,       //0x1F
    TPG_KEY_MENU_BUFFER = 32,        //0x20
    TPG_KEY_MENU_HISTORY = 33,       //0x21
    
    TPG_KEY_KNOB_LEFT = 253,          //0x16
    TPG_KEY_KNOB_RIGHT = 254,            //0x17
} tKeyCode;

typedef enum _TLV_CONTROL_ERROR_CODE
{
    TLV_NO_FAIL = 0,
    TLV_FAIL_TO_FIND_DEVICE,
    TLV_FAIL_TO_FIND_BOARD_INFO,
    TLV_FAIL_TO_FIND_FW_FILE,
    TLV_FAIL_TO_DOWNLOAD_FW,
    TLV_FAIL_TO_TEST_FW,
    TLV_FAIL_TO_TEST_PCI,
    TLV_FAIL_TO_CONFIRM_LN,
    TLV_FAIL_TO_ALLOC_DMA_MEMORY,
	//2010/10/5
	TLV_FAIL_TO_FIND_MOD_TYPE,
	TLV_FAIL_TO_LOAD_LLD = 50	//HLD
} TLV_CONTROL_ERROR_CODE;

typedef enum _tMenuParameters
{
    MAIN_MENU_PLAYRATE = 0,
    MAIN_MENU_RF,
    MAIN_MENU_SYMBOLRATE,
    MAIN_MENU_CELL_ID,
    MAIN_MENU_NOISE_POWER,
    MAIN_MENU_ATTEN_INT,
    MAIN_MENU_ATTEN_EXT,
    MAIN_MENU_START_POS,
    MAIN_MENU_END_POS,
    MAIN_MENU_SI_INFO,
    MAIN_MENU_MAX
} tMenuParameters;

typedef enum _tModulatorSource
{
    FILE_SRC = 0,
    SMPTE310M_SRC = 2,
    DVBASI_SRC,
    MAX_MODULATOR_SOURCE
} tModulatorSource;

#ifdef WIN32
typedef enum _tInputSource
{
	FILE_SINGLE_IN = 0,
	FILE_LIST_IN,
	REMUX_FILE_IN,
	PRBS_DATA_IN,
	DVB_ASI_IN,
	SMPTE_310M_IN,
	IP_IN,
	MAX_INPUT_SOURCE
} tInputSource;

typedef enum _tOutputType
{
	RF_SIGNAL = 0,
	OUTPUT_FILE,
	MAX_OUTPUT_TYPE
} tOutputType;
#endif

typedef enum _tModulatorMode
{
    DVB_T = 0,
    VSB_8,
    QAM_A,
    QAM_B,
    QPSK,
    TDMB,
    VSB_16,
    DVB_H,
    DVB_S2,
    ISDB_T,
    ISDB_T_13,
    DTMB,
    CMMB,
    DVB_T2,		//2010/3/25
    RESERVED_O,
    //ATSC-M/H
    ATSC_MH,
	//2010/7/18 I/Q PLAY/CAPTURE
	IQ_PLAY,
	//2010/12/06 ISDB-S
	ISDB_S,
	DVB_C2,		//2011/2/23
	MULTIPLE_QAMB,
	MULTIPLE_VSB,
	MULTIPLE_DVBT,	//2012/6/28 multi dvb-t
	ASI_OUTPUT_MODE,
    MAX_MODULATORMODE   
} tModulatorMode;

typedef enum _tBandWidth
{
    DVBT2_BW_1Dot7MHZ = 0,
    DVBT2_BW_5MHZ = 1,
    DVBT2_BW_6MHZ = 2,
    DVBT2_BW_7MHZ = 3,
    DVBT2_BW_8MHZ = 4,
    DVBH_BW_5MHZ = 0,
    DVBH_BW_6MHZ = 1,
    DVBH_BW_7MHZ = 2,
    DVBH_BW_8MHZ = 3,
    BW_6MHZ = 0,
    BW_7MHZ = 1,
    BW_8MHZ = 2,
    MAX_BANDWIDTH
} tBandWidth;

typedef enum _tTXmode
{
    TX_2K = 0,
    TX_8K,
    TX_4K,
    MAX_TXMODE
} tTXmode;

typedef enum _tGuardInterval
{
    GI_1_OF_4 = 0,
    GI_1_OF_8,
    GI_1_OF_16,
    GI_1_OF_32,
    MAX_GUARDINTERVAL
} tGuardInterval;

typedef enum _tConstellation
{
    CONST_QPSK = 0,
    CONST_16QAM,
    CONST_64QAM,
    MAX_CONSTELLATION
} tConstellation;

typedef enum _tConstQAM_A
{
    CONST_QAM_A_16 = 0,
    CONST_QAM_A_32,
    CONST_QAM_A_64,
    CONST_QAM_A_128,
    CONST_QAM_A_256,
    MAX_CONST_QAM_A
} tConstQAM_A;

typedef enum _tConstQAM_B
{
    CONST_QAM_B_64 = 0,
    CONST_QAM_B_256,
    MAX_CONST_QAM_B
} tConstQAM_B;

typedef enum _tConstDVB_S2
{
    CONST_DVB_S2_QPSK = 0,
    CONST_DVB_S2_8PSK,
    CONST_DVB_S2_16APSK,
    CONST_DVB_S2_32APSK,
    MAX_CONST_DVB_S2
} tConstDVB_S2;

typedef enum _tRollOffFactor
{
    ROLL_OFF_FACTOR_020 = 0,
    ROLL_OFF_FACTOR_025,
    ROLL_OFF_FACTOR_035,
    ROLL_OFF_FACTOR_NONE,
    MAX_ROLL_OFF_FACTOR
} tRollOffFactor;

typedef enum _tRRC_Filter
{
    RRC_FILTER_OFF = 0,
    RRC_FILTER_ON,
    MAX_RRC_FILTER
} tRRC_Filter;

typedef enum _tInterleave
{
    INTERLEAVE_128_1_ = 0,
    INTERLEAVE_64_2,
    INTERLEAVE_32_4,
    INTERLEAVE_16_8,
    INTERLEAVE_8_16,
    INTERLEAVE_128_1,
    INTERLEAVE_128_2,
    INTERLEAVE_128_3,
    INTERLEAVE_128_4,
    INTERLEAVE_128_5,
    INTERLEAVE_128_6,
    INTERLEAVE_128_7,
    INTERLEAVE_128_8,
    MAX_INTERLEAVE
} tInterleave;

typedef enum _tIFOutFreq
{
    IF_OUT_36MHZ = 0,
    IF_OUT_44MHZ,
    IF_OUT_36_125MHZ,
    MAX_IFOUTFREQ
} tIFOutFreq;

typedef enum _tSpectrumType
{
    SPECTRUM_NORMAL = 0,
    SPECTRUM_INVERSE
} tSpectrumType;

typedef enum _tPRBSmode
{
    PRBS_MODE_NONE = 0,
    PRBS_MODE_2_EXP_7_1,
    PRBS_MODE_2_EXP_10_1,
    PRBS_MODE_2_EXP_15_1,
    PRBS_MODE_2_EXP_23_1,
    MAX_PRBSMODE
} tPRBSmode;

typedef enum _tRFOutFreqUnit
{
    RF_OUT_HZ = 0,
    RF_OUT_KHZ,
    RF_OUT_MHZ
} tRFOutFreqUnit;

typedef enum _tOffsetType
{
    OFFSET_START = 0,
    OFFSET_CURRENT,
    OFFSET_END,
    OFFSET_RELEASE
} tOffsetType;

typedef enum _tIPStreamingMode
{
    NO_IP_STREAM = 0,
    SEND_IP_STREAM,
    RECV_IP_STREAM,
    RECV_IP_STREAM_REC,
    RUN_FILE_DISPLAY,
    RUN_ASI_DISPLAY,
    SEND_IP_STREAM_REC,
        
    MAX_IPSTREAMINGMODE
} tIPStreamingMode;

typedef enum _tDTMB_CONTELLATION
{
    CONST_DTMB_4QAM_NR = 0,
    CONST_DTMB_4QAM,
    CONST_DTMB_16QAM,
    CONST_DTMB_32QAM,
    CONST_DTMB_64QAM,
    CONST_DTMB_MAX
} tDTMB_CONTELLATION;
        
typedef enum _tDTMB_CODERATE
{
    CONST_DTMB_CODE_7488_3008 = 0,
    CONST_DTMB_CODE_7488_4512,
    CONST_DTMB_CODE_7488_6016,
    CONST_DTMB_CODE_MAX
} tDTMB_CODERATE;
        
typedef enum _tDTMB_INTERLEAVE
{
    CONST_DTMB_INTERLEAVE_0 = 0,
    CONST_DTMB_INTERLEAVE_1,
    CONST_DTMB_INTERLEAVE_MAX
} tDTMB_INTERLEAVE;
                
typedef enum _tDTMB_FRAME_HEADER
{
    CONST_DTMB_FRAME_HEADER_MODE_1 = 0,
    CONST_DTMB_FRAME_HEADER_MODE_2,
    CONST_DTMB_FRAME_HEADER_MODE_3,
    CONST_DTMB_FRAME_HEADER_MODE_MAX
} tDTMB_FRAME_HEADER;
        
typedef enum _tDTMB_CARRIER_NUMBER
{
    CONST_DTMB_CARRIER_NUMBER_0 = 0,
    CONST_DTMB_CARRIER_NUMBER_1,
    CONST_DTMB_CARRIER_NUMBER_MAX
} tDTMB_CARRIER_NUMBER;

typedef enum _tDTMB_FRAME_HEADER_PN
{
    CONST_DTMB_FRAME_HEADER_PN_FIXED = 0,
    CONST_DTMB_FRAME_HEADER_PN_ROTATED,
    CONST_DTMB_FRAME_HEADER_PN_MAX
} tDTMB_FRAME_HEADER_PN;

typedef enum _tDTMB_PILOT_INSERTION
{
    CONST_DTMB_PILOT_INSERTION_OFF = 0,
    CONST_DTMB_PILOT_INSERTION_ON,
    CONST_DTMB_PILOT_INSERTION_MAX
} tDTMB_PILOT_INSERTION;

typedef enum _tBERT_PACKET_TYPE
{
    NO_BERT_OPERTION = 0,
    SERIAL_ALL_0,
    SERIAL_ALL_1,
    SERIAL_PRBS_2_15,
    SERIAL_PRBS_2_23,
    TS_HEAD_184_ALL_0,
    TS_HEAD_184_ALL_1,
    TS_HEAD_184_PRBS_2_15,
    TS_HEAD_184_PRBS_2_23,
    TS_SYNC_187_ALL_0,
    TS_SYNC_187_ALL_1,
    TS_SYNC_187_PRBS_2_15,
    TS_SYNC_187_PRBS_2_23,
    TS_STUFFING_184_ALL_0,
    TS_STUFFING_184_ALL_1,
    TS_STUFFING_184_PRBS_2_15,
    TS_STUFFING_184_PRBS_2_23,
    BERT_PACKET_TYPE_MAX
} tBERT_PACKET_TYPE;

typedef enum _tCHANNEL_TBL
{
    NO_CHANGE = 0,
    BRODCAST,
    STD_CABLE,
    HRC_CABLE,
    IRC_CABLE,
    DVB_T_FRANCE,
    DVB_T_ITALY,
    DVB_T_GERMANY,
    DVB_T_AUSTRALIA,
    DVB_T_CHINA,
    TDMB_BAND_III,
    TDMB_L_BAND,
    TDMB_CANADA,
    TDMB_KOREA,
    ISDB_T_JAPAN,
    ISDB_T_BRAZIL,
    DTMB_CHANNEL,
	//ISDB_S_JAPAN,
    USER_DEFINED,
    MAX_CHANNEL_TABLE
} tCHANNEL_TBL;

typedef enum _tMAIN_UI
{
    TS_TEXT = 0,
    MAX_CHK,
    SYMBOL_TEXT,
    DEFAULT_CHK,
    FILE_LIST,
    PLAY_LIST,
    PROGRAM_COMBO,
    ZOOM_BUTTON,
    
    UNIT_COMBO,
    CHANNEL_COMBO,
	LNB_BUTTON,
    RF_TEXT,
    IF_COMBO,
	LEVEL_UNIT_COMBO,
    LEVEL_TEXT,
	INCREMENT_COMBO,
    //6.10.06
    AMP_CHK,
    //AGC - RF Level -> Atten/AGC
    AGC_CHK,

    CNR_TEXT,
    ADAPTOR_COMBO,
    TYPE_COMBO,
    BANDWIDTH_COMBO,
    CONSTELLATION_COMBO,
    CODERATE_COMBO,
    TXMODE_COMBO,
    QAMINTERLEAVING_COMBO,
    PILOT_COMBO,
    GUARDINTERVAL_COMBO,
    SPECTRUM_COMBO,
	START_FREQ,
    TMCC_CHK,
    PARAMS_BUTTON,
    //2010/9/13 FIXED - ISDB-T Emergency Broadcasting Control
	EMERGENCY_BROADCASTING_CHK,

    MAIN_UI_MAX
} tMAIN_UI;

//CMMB
typedef enum _tRS_CODING_RATE
{
    RS_240_240 = 0,
    RS_224_240,
    RS_192_240,
    RS_176_240,
    RS_CODING_RATE_MAX
} tRS_CODING_RATE;

typedef enum _tBYTE_CROSSING_MODE
{
    BYTE_CROSSING_RESERVED0 = 0,
    BYTE_CROSSING_MODE1,
    BYTE_CROSSING_MODE2,
    BYTE_CROSSING_MODE3,
    BYTE_CROSSING_MODE_MAX
} tBYTE_CROSSING_MODE;

typedef enum _tLDPC_ENCODING_RATE
{
	LDPC_1_2 = 0,
    LDPC_3_4,
    LDPC_RESERVED2,
    LDPC_RESERVED3,
    LDPC_ENCODING_RATE_MAX,
} tLDPC_ENCODING_RATE;

typedef enum _tMODULAITON_METHOD
{
    MODULAITON_BPSK = 0,
    MODULAITON_QPSK,
    MODULAITON_16QAM,
    MODULAITON_METHOD_MAX
} tMODULAITON_METHOD;


typedef enum _tSCRAMBLE_METHOD
{
    SCRAMBLE_MODE0 = 0,
    SCRAMBLE_MODE1,
    SCRAMBLE_MODE2,
    SCRAMBLE_MODE3,
    SCRAMBLE_MODE4,
    SCRAMBLE_MODE5,
    SCRAMBLE_MODE6,
    SCRAMBLE_MODE7,
    SCRAMBLE_METHOD_MAX
} tSCRAMBLE_METHOD;

//2010/12/06 ISDB-S=============================================================
typedef enum _tISDBS_CONTELLATION
{
	CONST_ISDBS_BPSK = 0,
	CONST_ISDBS_QPSK,
	CONST_ISDBS_TC8PSK,
	CONST_ISDBS_MAX
} tISDBS_CONTELLATION;

typedef enum _tISDBS_CODERATE
{
	CONST_ISDBS_CODE_1_2 = 0,
	CONST_ISDBS_CODE_2_3,
	CONST_ISDBS_CODE_3_4,
	CONST_ISDBS_CODE_5_6,
	CONST_ISDBS_CODE_7_8,
	CONST_ISDBS_CODE_MAX
} tISDBS_CODERATE;

#ifndef WIN32
//--------------------------------------------------------------------------
// Enumeration
//--------------------------------------------------------------------------
typedef enum _tActiveFocus
{
    FILELISTWINDOW = 0,
    PLAYLISTWINDOW
} tActiveFocus;
#endif
//==============================================================================

//2011/11/22 improve ISDB-T
enum ISDBT_TMCC_BTYPE
{
	ISDBT_BTYPE_TV = 0,
	ISDBT_BTYPE_RAD1,
	ISDBT_BTYPE_RAD3,
	ISDBT_BTYPE_TV_1SEG,
};

enum ISDBT_TMCC_GUARD_INTERVAL
{
	ISDBT_GUARD_1_32 = 0,
	ISDBT_GUARD_1_16,
	ISDBT_GUARD_1_8,
	ISDBT_GUARD_1_4
};


enum ISDBT_TMCC_PARTIAL_FLAG{
	ISDBT_NO_PARTIAL_FLAG = 0,
	ISDBT_PARTIAL_FLAG = 1,
};



enum ISDBT_TMCC_MODULATION
{
	ISDBT_MOD_DQPSK = 0, // 3 bits
	ISDBT_MOD_QPSK,
	ISDBT_MOD_16QAM,
	ISDBT_MOD_64QAM,
	ISDBT_MOD_UNUSE = 7, // un-use

};



enum ISDBT_TMCC_CODERATE
{
	
	ISDBT_RATE_1_2 = 0,
	ISDBT_RATE_2_3,
	ISDBT_RATE_3_4,
	ISDBT_RATE_5_6,
	ISDBT_RATE_7_8,
	ISDBT_RATE_UNUSE = 7,
};


enum ISDBT_TMCC_INTERLEAVING_TIME
{
	//000
	ISDBT_INTERTIME_MODE1_0 = 0,
	ISDBT_INTERTIME_MODE2_0 = 0,
	ISDBT_INTERTIME_MODE3_0 = 0,
	
	// 001
	ISDBT_INTERTIME_MODE1_4 = 1,
	ISDBT_INTERTIME_MODE2_2 = 1,
	ISDBT_INTERTIME_MODE3_1 = 1,
		
	// 010 
	ISDBT_INTERTIME_MODE1_8 = 2,
	ISDBT_INTERTIME_MODE2_4 = 2,
	ISDBT_INTERTIME_MODE3_2 = 2,

	// 011 
	ISDBT_INTERTIME_MODE1_16 = 3,
	ISDBT_INTERTIME_MODE2_8 = 3,
	ISDBT_INTERTIME_MODE3_4 = 3,

	// 100 - 110: RESERVE

	ISDBT_INTERTIME_UNUSE = 7, // un-use


};
//////////////////////////////////////////////////////////////////////
//2011/2/23 DVB-C2
#define C2_BANDWIDTH_142 142
#define C2_BANDWIDTH_284 284

#define C2_VALUE_8BIT       255
#define C2_VALUE_9BIT       511
#define C2_VALUE_13BIT     8191
#define C2_VALUE_14BIT    16383

#define C2_GUARD_INDEX_0      0
#define C2_GUARD_INDEX_1      1

#define C2_PLP_CODE_2_3	   0
#define C2_PLP_CODE_3_4	   1
#define C2_PLP_CODE_4_5	   2
#define C2_PLP_CODE_5_6	   3
#define C2_PLP_CODE_8_9	   4

#define C2_PLP_FEC_16K		   0
#define C2_PLP_FEC_64K        1

#define C2_PLP_MOD_16QAM	   0
#define C2_PLP_MOD_64QAM	   1
#define C2_PLP_MOD_256QAM	   2
#define C2_PLP_MOD_1024QAM	   3
#define C2_PLP_MOD_4096QAM	   4

#define C2_FEC_HEADER_TYPE_0   0
#define C2_FEC_HEADER_TYPE_1   1

#define C2_L1TI_MODE_NONE		0
#define C2_L1TI_MODE_BEST_FIT	1
#define C2_L1TI_MODE_4SYMBOLS	2
#define C2_L1TI_MODE_8SYMBOLS	3

#define C2_BANDWIDTH_6M		0
#define C2_BANDWIDTH_7M		1
#define C2_BANDWIDTH_8M		2

#define C2_ARRAY_COUNT_1    4
#define C2_ARRAY_COUNT_0    3408

//------ kslee Added----------
#define MAX_CMMB_PARAM_COUNT		8
#define MIN_CMMB_TIME_SLOT_COUNT	1
#define MAX_CMMB_TIME_SLOT_COUNT	40

#ifdef WIN32
typedef enum _tSnmpMsgType
{
	TVB390_BOARD_ID	= 1,
	TVB390_BOARD_AUTHORIZATION,
	TVB390_BOARD_LOCATION,
	TVB390_BOARD_INSTALLATION,

	TVB390_BITRATE,
	TVB390_PACKET_SIZE,
	TVB390_DISK_FREE_SIZE,
	TVB390_FILE_PATH,
	TVB390_FILE_LIST_COUNT,
	TVB390_FILE_LIST_INDEX,
	TVB390_FILE_LIST_NAME,
	TVB390_PLAY_LIST_COUNT,
	TVB390_PLAY_LIST_INDEX,
	TVB390_PLAY_LIST_NAME,
	TVB390_INPUT_STATUS,
	TVB390_ELAPSED_TIME,
	TVB390_RUN_TIME,
	TVB390_RF_LEVEL_MIN,
	TVB390_RF_LEVEL_MAX,
	//kslee20091218
	TVB390_ATTEN_MIN,
	TVB390_ATTEN_MAX,

	TVB390_START_PLAYING,
	TVB390_SET_PLAY_MODE,
	TVB390_SET_INPUT_SOURCE,
	TVB390_ADD_LIST,
	TVB390_DELETE_LIST,
	TVB390_START_RECORDING,
	TVB390_SELECT_LIST,
	TVB390_MOVE_LIST_INDEX,
	TVB390_APP_EXECUTE,

	TVB390_SELECT_SLOT,
	TVB390_MODULATOR_TYPE,

	TVB390_DVB_T_H_BANDWIDTH,
	TVB390_DVB_T_H_CONSTELLATION,
	TVB390_DVB_T_H_CODERATE,
	TVB390_DVB_T_H_TXMODE,
	TVB390_DVB_T_H_GUARD_INTERVAL,

	TVB390_QAM_A_CONSTELLATION,
	TVB390_QAM_B_CONSTELLATION,
	TVB390_QAM_B_INTERLEAVE,

	TVB390_QPSK_CODERATE,
	TVB390_QPSK_RRC_FILTER,
	TVB390_QPSK_SPECTRUM,

	TVB390_DVB_H_BANDWIDTH,
	TVB390_DVB_H_CONSTELLATION,
	TVB390_DVB_H_CODERATE,
	TVB390_DVB_H_TXMODE,
	TVB390_DVB_H_GUARD_INTERVAL,
	TVB390_DVB_H_MPE_FEC,
	TVB390_DVB_H_TIME_SLICE,
	TVB390_DVB_H_IN_DEPTH_INTERLEAVE,
	TVB390_DVB_H_CELL_ID,

	TVB390_DVB_S2_CONSTELLATION,
	TVB390_DVB_S2_CODERATE,
	TVB390_DVB_S2_PILOT,
	TVB390_DVB_S2_ROLL_OFF,
	TVB390_DVB_S2_SPECTRUM,

	TVB390_ISDB_T_USE_TMCC,

	TVB390_ISDB_T_13SEG_USE_TMCC,

	TVB390_DTMB_CONSTELLATION,
	TVB390_DTMB_CODERATE,
	TVB390_DTMB_INTERLEAVE,
	TVB390_DTMB_FRAME_HEADER,
	TVB390_DTMB_CARRIER_NUMBER,
	TVB390_DTMB_FRAME_HEADER_PN,
	TVB390_DTMB_PILOT_INSERTION,
	
	TVB390_RF,
	TVB390_IF,
	TVB390_LEVEL,
	TVB390_CNR,
	TVB390_CNR_MODE,
	TVB390_NULL_TP_ON_STOP,
	TVB390_USE_AMP,
	TVB390_USE_TAT4720,
	TVB390_USE_TAT4720_COM,
	//kslee20091218
	TVB390_ATTEN,
	TVB390_USE_AGC,

	TVB390_TS,
	TVB390_TS_MAX,
	TVB390_SYMBOL_RATE,
	TVB390_SYMBOL_RATE_DEFAULT,

	TVB390_PCR_PTS_DTS,
	TVB390_CONTINUITY_COUNTER,
	TVB390_TOT_TDT,
	TVB390_TOT_TDT_UDT_TIME_SETTING,
	
	//kslee 2010/3/24 
	TVB390_PCR_RESTAMP,

	TVB390_USE_SUB_LOOP,
	TVB390_START_TIME,
	TVB390_END_TIME,
	TVB390_USE_FIXED_TS_RATE,

	TVB390_USE_IP_STREAMING,
    TVB390_IP_OUTPUT_ACCESS,
	TVB390_IP_OUTPUT_ADDRESS_URL,
	TVB390_IP_OUTPUT_PORT,
	TVB390_IP_INPUT_ACCESS,
	TVB390_IP_INPUT_ADDRESS_URL,
	TVB390_IP_INPUT_PORT,
	
	//kslee 2010/3/24
	TVB390_IP_INPUT_MULTICAST,
	TVB390_IP_INPUT_LOCAL,
	//kslee 2010/3/25
	TVB390_USE_MULTICAST_IP,

	//kslee 2010/4/20
	TVB390_DVB_T2_BANDWIDTH,

	TVB390_SNMP_MAX
} tSnmpMsgType;
#else
typedef enum _tSnmpMsgType
{
	TVB390_BOARD_ID	= 1,
	TVB390_BOARD_AUTHORIZATION,
	TVB390_BOARD_LOCATION,
	TVB390_BOARD_INSTALLATION,
	TVB390_BOARD_LN,		
	TVB390_BOARD_SN,
	TVB390_BOARD_ID_INFO,
	TVB390_BITRATE,					
	TVB390_PACKET_SIZE,
	TVB390_DISK_FREE_SIZE,			//10

	TVB390_FILE_PATH,				
	TVB390_FILE_LIST_COUNT,
	TVB390_FILE_LIST_INDEX,
	TVB390_FILE_LIST_NAME,
	TVB390_PLAY_LIST_COUNT,			
	TVB390_PLAY_LIST_INDEX,
	TVB390_PLAY_LIST_NAME,
	TVB390_INPUT_STATUS,
	TVB390_ELAPSED_TIME,
	TVB390_RUN_TIME,				//20

	TVB390_RF_LEVEL_MIN,			
	TVB390_RF_LEVEL_MAX,
	TVB390_ATTEN_MIN,
	TVB390_ATTEN_MAX,
	TVB390_LOOP_COUNT,
	TVB390_TS_IN_RATE,
	TVB390_TS_RECORD_SIZE,			
	TVB390_START_PLAYING,			
	TVB390_SET_PLAY_MODE,
	TVB390_SET_INPUT_SOURCE,		// 30

	TVB390_ADD_LIST,
	TVB390_DELETE_LIST,
	TVB390_START_RECORDING,
	TVB390_SELECT_LIST,
	TVB390_MOVE_LIST_INDEX,
	TVB390_APP_EXECUTE,
	TVB390_SET_FILE_POS,
 	TVB390_CHECK_LICENSE,
 	TVB390_UPDATE_LICENSE,
 	TVB390_SET_FACTORY_DEFAULT,		//40

	TVB390_SELECT_SLOT,				
	TVB390_MODULATOR_TYPE,
	TVB390_DVB_T_H_BANDWIDTH,		
	TVB390_DVB_T_H_CONSTELLATION,
	TVB390_DVB_T_H_CODERATE,
	TVB390_DVB_T_H_TXMODE,
	TVB390_DVB_T_H_GUARD_INTERVAL,
	TVB390_QAM_A_CONSTELLATION,		
	TVB390_QAM_B_CONSTELLATION,
	TVB390_QAM_B_INTERLEAVE,		//50
	
	TVB390_QPSK_CODERATE,			
	TVB390_QPSK_RRC_FILTER,
	TVB390_QPSK_SPECTRUM,
	TVB390_DVB_H_BANDWIDTH,			
	TVB390_DVB_H_CONSTELLATION,
	TVB390_DVB_H_CODERATE,
	TVB390_DVB_H_TXMODE,
	TVB390_DVB_H_GUARD_INTERVAL,
	TVB390_DVB_H_MPE_FEC,
	TVB390_DVB_H_TIME_SLICE,		//60

	TVB390_DVB_H_IN_DEPTH_INTERLEAVE,
	TVB390_DVB_H_CELL_ID,
	TVB390_DVB_S2_CONSTELLATION,	
	TVB390_DVB_S2_CODERATE,
	TVB390_DVB_S2_PILOT,
	TVB390_DVB_S2_ROLL_OFF,
	TVB390_DVB_S2_SPECTRUM,
	TVB390_ISDB_T_USE_TMCC,
	TVB390_ISDB_T_13SEG_USE_TMCC,	
	TVB390_DTMB_CONSTELLATION,		//70

	TVB390_DTMB_CODERATE,
	TVB390_DTMB_INTERLEAVE,
	TVB390_DTMB_FRAME_HEADER,
	TVB390_DTMB_CARRIER_NUMBER,
	TVB390_DTMB_FRAME_HEADER_PN,
	TVB390_DTMB_PILOT_INSERTION,
	TVB390_RF,						
	TVB390_IF,
	TVB390_LEVEL,
	TVB390_CNR,						//80

	TVB390_CNR_MODE,
	TVB390_NULL_TP_ON_STOP,
	TVB390_USE_AMP,
	TVB390_USE_TAT4720,
	TVB390_USE_TAT4720_COM,
	TVB390_ATTEN,
	TVB390_USE_AGC,
	TVB390_BERT_TYPE,				
	TVB390_TS,						
	TVB390_TS_MAX,					//90

	TVB390_SYMBOL_RATE,
	TVB390_SYMBOL_RATE_DEFAULT,
	TVB390_PCR_PTS_DTS,				
	TVB390_CONTINUITY_COUNTER,
	TVB390_TOT_TDT,
	TVB390_TOT_TDT_UDT_TIME_SETTING,
	TVB390_RESTAMP_DATE,			
	TVB390_RESTAMP_TIME,			
	TVB390_USE_SUB_LOOP,			
	TVB390_START_TIME,				//100

	TVB390_END_TIME,
	TVB390_USE_FIXED_TS_RATE,
	TVB390_USE_IP_STREAMING,		
	TVB390_IP_RXIP,					//TVB390_IP_OUTPUT_ACCESS,
	TVB390_IP_RXMULTICASTIP,		//TVB390_IP_OUTPUT_ADDRESS_URL,
	TVB390_IP_USEMULTICAST,			//TVB390_IP_OUTPUT_PORT,
	TVB390_IP_INPUTRATE,			//TVB390_IP_INPUT_ACCESS,
	TVB390_IP_INPUT_ADDRESS_URL,	//dummy
	TVB390_IP_INPUT_PORT,
	TVB390_ERROR_USE_PACKET,		// 110
	
	TVB390_ERROR_NUM_PACKET_PACKET,
	TVB390_ERROR_USE_BIT,
	TVB390_ERROR_NUM_PACKET_BIT,
	TVB390_ERROR_NUM_PER_PACKET_BIT,
	TVB390_ERROR_USE_BYTE,
	TVB390_ERROR_NUM_PACKET_BYTE,
	TVB390_ERROR_NUM_PER_PACKET_BYTE,
	TVB390_RESERVED_TICK_COUNT,
	TVB390_FIRMWARE_VERSION,
	TVB390_FIRMWARE_WRITE,			//120
	
	TVB390_REBOOT,
	TVB390_IP_ADDRESS,
	TVB390_SUBNET_MASK,
	TVB390_GATEWAY,
	TVB390_DHCP_ENABLE,
	TVB390_BOARD_REV,
	TVB390_CMMB_MDIF,
	TVB390_CMMB_CONSTELLATION,
	TVB390_CMMB_RSCODING,
	TVB390_CMMB_BYTECROSSING,		//130

	TVB390_CMMB_LDPC,
	TVB390_CMMB_SCRAMBLE,
	TVB390_CMMB_TIMESLICE,
	TVB390_CMMB_MDIF_ITEM,
	TVB390_RBF_WRITE,	
	TVB390_PCR_RESTAMP,
	TVB390_DVB_T2_BANDWIDTH,
	TVB390_DVB_T2_PARAMETER,
	TVB390_DVB_T2_PARAMETER2,
	TVB390_DVB_T2_PARAMETER3,		//140

	TVB390_DVB_T2_PARAMETER4,
	TVB390_DVB_T2_PARAMETER5,
	TVB390_DVB_T2_PARAMETER6,
	TVB390_DVB_T2_PARAMETER7,
	TVB390_DVB_T2_PARAMETER8,
	TVB390_DVB_T2_PARAMETER9,
	TVB390_DVB_T2_PARAMETER10,
	TVB390_DVB_T2_PARAMETER11,
	TVB390_DVB_T2_PARAMETER12,
	TVB390_DVB_T2_PARAMETER13,		//150

	TVB390_DVB_T2_PARAMETER14,
	TVB390_DVB_T2_PARAMETER15,
	TVB390_DVB_T2_PARAMETER16,
	TVB390_DVB_T2_PARAMETER17,
	TVB390_ATSC_MH_PARAMETER,
	TVB390_ATSC_MH_PARAMETER2,
	TVB390_ATSC_MH_PARAMETER3,
	TVB390_ATSC_MH_PARAMETER4,
	TVB390_ATSC_MH_PARAMETER5,
	TVB390_ATSC_MH_PARAMETER6,		//160

	TVB390_ATSC_MH_PARAMETER7,
	TVB390_ATSC_MH_PARAMETER8,
	TVB390_ATSC_MH_PARAMETER9,
	TVB390_ISDB_T_PARAMETER,
	TVB390_ISDB_T_PARAMETER2,
	TVB390_ISDB_T_PARAMETER3,
	TVB390_ISDB_T_PARAMETER4,
	TVB390_ISDB_T_PARAMETER5,
	TVB390_ISDB_T_PARAMETER6,
	TVB390_ISDB_T_PARAMETER7,		//170

	TVB390_ISDB_T_PARAMETER8,
	TVB390_ISDB_T_PARAMETER9,
	TVB390_DVB_T2_BW,
	TVB390_DVB_T2_FFT,
	TVB390_DVB_T2_GUARD,
	TVB390_DVB_T2_L1_MOD,
	TVB390_DVB_T2_PILOT_PATTERN,
	TVB390_DVB_T2_BWT,
	TVB390_DVB_T2_NETWORK_ID,
	TVB390_DVB_T2_SYSTEM_ID,		//180

	TVB390_DVB_T2_CELL_ID,
	TVB390_DVB_T2_PID,
	TVB390_DVB_T2_NUM_T2_FRAME,
	TVB390_DVB_T2_NUM_DATA_SYMBOL,
	TVB390_EMERGENCY_BROADCASTING,
	TVB390_TMCC_BROADCAST,
	TVB390_TMCC_MODE,
	TVB390_TMCC_GUARD,
	TVB390_TMCC_PARTIAL,
	TVB390_TMCC_SEG_A,				//190

	TVB390_TMCC_MOD_A,
	TVB390_TMCC_COD_A,
	TVB390_TMCC_TIME_A,
	TVB390_TMCC_DATA_A,
	TVB390_TMCC_SEL_A,
	TVB390_TMCC_COUNT_A,
	TVB390_TMCC_LAYER_INFO_A_1,
	TVB390_TMCC_LAYER_INFO_A_2,
	TVB390_TMCC_LAYER_INFO_A_3,
	TVB390_TMCC_SEG_B,				//200

	TVB390_TMCC_MOD_B,
	TVB390_TMCC_COD_B,
	TVB390_TMCC_TIME_B,
	TVB390_TMCC_DATA_B,
	TVB390_TMCC_SEL_B,
	TVB390_TMCC_COUNT_B,
	TVB390_TMCC_LAYER_INFO_B_1,
	TVB390_TMCC_LAYER_INFO_B_2,
	TVB390_TMCC_LAYER_INFO_B_3,
	TVB390_TMCC_SEG_C,				//210

	TVB390_TMCC_MOD_C,
	TVB390_TMCC_COD_C,
	TVB390_TMCC_TIME_C,
	TVB390_TMCC_DATA_C,
	TVB390_TMCC_SEL_C,
	TVB390_TMCC_COUNT_C,
	TVB390_TMCC_LAYER_INFO_C_1,
	TVB390_TMCC_LAYER_INFO_C_2,
	TVB390_TMCC_LAYER_INFO_C_3,
	TVB390_OTHER_PID_MAP,			//220

	TVB390_MULTI_PID_MAP,
	TVB390_TMCC_TOTAL_LAYER_COUNT,
	TVB390_TMCC_TOTAL_LAYER_INFO_1,
	TVB390_TMCC_TOTAL_LAYER_INFO_2,
	TVB390_TMCC_TOTAL_LAYER_INFO_3,
	TVB390_TMCC_PID_COUNT,
	TVB390_TMCC_PID_INDEX,
	TVB390_TMCC_PID_INFO,
	TVB390_TMCC_SET_COMMAND,
	TVB390_DVB_T2_ISDB_S_DIRECTORY,		//230

	TVB390_DVB_T2_ISDB_S_FILE_COUNT,
	TVB390_DVB_T2_ISDB_S_FILE_INDEX,
	TVB390_DVB_T2_ISDB_S_FILE_NAME,
	TVB390_DVB_T2_ISDB_S_FILE_BITRATE,
	TVB390_DVB_T2_PLP_ID,
	TVB390_DVB_T2_PLP_MOD,
	TVB390_DVB_T2_PLP_COD,
	TVB390_DVB_T2_PLP_FEC_TYPE,
	TVB390_DVB_T2_PLP_NUM_BLOCK,
	TVB390_DVB_T2_PLP_HEM,				//240

	TVB390_DVB_T2_PLP_ROT,
	TVB390_DVB_T2_PLP_TS_PATH,
	TVB390_DVB_T2_PLP_FILE_BITRATE,
	TVB390_DVB_T2_PLP_PLP_BITRATE,
	TVB390_DVB_T2_PLP_ID_1,
	TVB390_DVB_T2_PLP_MOD_1,
	TVB390_DVB_T2_PLP_COD_1,
	TVB390_DVB_T2_PLP_FEC_TYPE_1,
	TVB390_DVB_T2_PLP_NUM_BLOCK_1,
	TVB390_DVB_T2_PLP_HEM_1,			//250

	TVB390_DVB_T2_PLP_ROT_1,
	TVB390_DVB_T2_PLP_TS_PATH_1,
	TVB390_DVB_T2_PLP_FILE_BITRATE_1,
	TVB390_DVB_T2_PLP_PLP_BITRATE_1,
	TVB390_DVB_T2_PLP_ID_2,
	TVB390_DVB_T2_PLP_MOD_2,
	TVB390_DVB_T2_PLP_COD_2,
	TVB390_DVB_T2_PLP_FEC_TYPE_2,
	TVB390_DVB_T2_PLP_NUM_BLOCK_2,
	TVB390_DVB_T2_PLP_HEM_2,			//260

	TVB390_DVB_T2_PLP_ROT_2,
	TVB390_DVB_T2_PLP_TS_PATH_2,
	TVB390_DVB_T2_PLP_FILE_BITRATE_2,
	TVB390_DVB_T2_PLP_PLP_BITRATE_2,
	TVB390_DVB_T2_PLP_ID_3,
	TVB390_DVB_T2_PLP_MOD_3,
	TVB390_DVB_T2_PLP_COD_3,
	TVB390_DVB_T2_PLP_FEC_TYPE_3,
	TVB390_DVB_T2_PLP_NUM_BLOCK_3,
	TVB390_DVB_T2_PLP_HEM_3,			//270

	TVB390_DVB_T2_PLP_ROT_3,
	TVB390_DVB_T2_PLP_TS_PATH_3,
	TVB390_DVB_T2_PLP_FILE_BITRATE_3,
	TVB390_DVB_T2_PLP_PLP_BITRATE_3,
	TVB390_DVB_T2_PLP_ID_4,
	TVB390_DVB_T2_PLP_MOD_4,
	TVB390_DVB_T2_PLP_COD_4,
	TVB390_DVB_T2_PLP_FEC_TYPE_4,
	TVB390_DVB_T2_PLP_NUM_BLOCK_4,
	TVB390_DVB_T2_PLP_HEM_4,			//280

	TVB390_DVB_T2_PLP_ROT_4,
	TVB390_DVB_T2_PLP_TS_PATH_4,
	TVB390_DVB_T2_PLP_FILE_BITRATE_4,
	TVB390_DVB_T2_PLP_PLP_BITRATE_4,
	TVB390_DVB_T2_PLP_ID_5,
	TVB390_DVB_T2_PLP_MOD_5,
	TVB390_DVB_T2_PLP_COD_5,
	TVB390_DVB_T2_PLP_FEC_TYPE_5,
	TVB390_DVB_T2_PLP_NUM_BLOCK_5,
	TVB390_DVB_T2_PLP_HEM_5,			//290

	TVB390_DVB_T2_PLP_ROT_5,
	TVB390_DVB_T2_PLP_TS_PATH_5,
	TVB390_DVB_T2_PLP_FILE_BITRATE_5,
	TVB390_DVB_T2_PLP_PLP_BITRATE_5,
	TVB390_DVB_T2_PLP_ID_6,
	TVB390_DVB_T2_PLP_MOD_6,
	TVB390_DVB_T2_PLP_COD_6,
	TVB390_DVB_T2_PLP_FEC_TYPE_6,
	TVB390_DVB_T2_PLP_NUM_BLOCK_6,
	TVB390_DVB_T2_PLP_HEM_6,			//300

	TVB390_DVB_T2_PLP_ROT_6,
	TVB390_DVB_T2_PLP_TS_PATH_6,
	TVB390_DVB_T2_PLP_FILE_BITRATE_6,
	TVB390_DVB_T2_PLP_PLP_BITRATE_6,
	TVB390_DVB_T2_PLP_ID_7,
	TVB390_DVB_T2_PLP_MOD_7,
	TVB390_DVB_T2_PLP_COD_7,
	TVB390_DVB_T2_PLP_FEC_TYPE_7,
	TVB390_DVB_T2_PLP_NUM_BLOCK_7,
	TVB390_DVB_T2_PLP_HEM_7,			//310

	TVB390_DVB_T2_PLP_ROT_7,
	TVB390_DVB_T2_PLP_TS_PATH_7,
	TVB390_DVB_T2_PLP_FILE_BITRATE_7,
	TVB390_DVB_T2_PLP_PLP_BITRATE_7,
	TVB390_DVB_T2_SET_T2MI,
	TVB390_DVB_T2_SEARCH,				//316
	TVB390_ISDB_S_CONSTELLATION,
	TVB390_ISDB_S_CODERATE,
	TVB390_ISDB_S_MULTI_TS_ID_0,
	TVB390_ISDB_S_MULTI_TS_PATH_0,		//320

	TVB390_ISDB_S_MULTI_TS_FILERATE_0,
	TVB390_ISDB_S_MULTI_TS_DATARATE_0,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_0, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_0,
	TVB390_ISDB_S_MULTI_TS_SLOT_0,
	TVB390_ISDB_S_MULTI_TS_ID_1,
	TVB390_ISDB_S_MULTI_TS_PATH_1,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_1,
	TVB390_ISDB_S_MULTI_TS_DATARATE_1,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_1,	//330

	TVB390_ISDB_S_MULTI_TS_CODERATE_1,
	TVB390_ISDB_S_MULTI_TS_SLOT_1,
	TVB390_ISDB_S_MULTI_TS_ID_2,
	TVB390_ISDB_S_MULTI_TS_PATH_2,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_2,
	TVB390_ISDB_S_MULTI_TS_DATARATE_2,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_2, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_2,
	TVB390_ISDB_S_MULTI_TS_SLOT_2,
	TVB390_ISDB_S_MULTI_TS_ID_3,		//340

	TVB390_ISDB_S_MULTI_TS_PATH_3,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_3,
	TVB390_ISDB_S_MULTI_TS_DATARATE_3,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_3, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_3,
	TVB390_ISDB_S_MULTI_TS_SLOT_3,
	TVB390_ISDB_S_MULTI_TS_ID_4,
	TVB390_ISDB_S_MULTI_TS_PATH_4,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_4,
	TVB390_ISDB_S_MULTI_TS_DATARATE_4,			//350

	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_4, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_4,
	TVB390_ISDB_S_MULTI_TS_SLOT_4,
	TVB390_ISDB_S_MULTI_TS_ID_5,
	TVB390_ISDB_S_MULTI_TS_PATH_5,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_5,
	TVB390_ISDB_S_MULTI_TS_DATARATE_5,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_5, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_5,
	TVB390_ISDB_S_MULTI_TS_SLOT_5,				//360

	TVB390_ISDB_S_MULTI_TS_ID_6,
	TVB390_ISDB_S_MULTI_TS_PATH_6,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_6,
	TVB390_ISDB_S_MULTI_TS_DATARATE_6,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_6, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_6,
	TVB390_ISDB_S_MULTI_TS_SLOT_6,
	TVB390_ISDB_S_MULTI_TS_ID_7,
	TVB390_ISDB_S_MULTI_TS_PATH_7,		
	TVB390_ISDB_S_MULTI_TS_FILERATE_7,			//370

	TVB390_ISDB_S_MULTI_TS_DATARATE_7,
	TVB390_ISDB_S_MULTI_TS_CONSTELLATION_7, 
	TVB390_ISDB_S_MULTI_TS_CODERATE_7,
	TVB390_ISDB_S_MULTI_TS_SLOT_7,				
	TVB390_ISDB_S_MULTI_TS_SET_CMD,				
	TVB390_ISDB_S_TMCC_USE,						//376
	TVB390_ISDB_S_IS_COMBINED_TS,				//377
	TVB390_ISDB_S_TS_ID,						//378
	TVB390_DVBC2_BANDWIDTH,
	TVB390_DVBC2_GUARDINTERVAL,					//380

	TVB390_DVBC2_STARTFREQ,
	TVB390_DVBC2_L1TIMODE,
	TVB390_DVBC2_NETID,
	TVB390_DVBC2_SYSID,
	TVB390_DVBC2_RESERVEDTONE,
	TVB390_DVBC2_NUMNOTCH,
	TVB390_DVBC2_NOTCHSTART,
	TVB390_DVBC2_NOTCHWIDTH,
	TVB390_DVBC2_DSLICE_TYPE,
	TVB390_DVBC2_DSLICE_FEC_H,					//390
	
	//2011/12/12 v7.5.0
	TVB390_DVBC2_PLP_ID_0,
	TVB390_DVBC2_PLP_MOD_0,
	TVB390_DVBC2_PLP_COD_0,
	TVB390_DVBC2_PLP_FEC_0,
	TVB390_DVBC2_PLP_BLK_0,
	TVB390_DVBC2_PLP_HEM_0,
	TVB390_DVBC2_PLP_TSPATH_0,
	TVB390_DVBC2_PLP_FILEBITRATE_0,
	TVB390_DVBC2_PLP_PLPBITRATE_0,				//399
	TVB390_DVBC2_PLP_ID_1,						//400

	TVB390_DVBC2_PLP_MOD_1,
	TVB390_DVBC2_PLP_COD_1,
	TVB390_DVBC2_PLP_FEC_1,
	TVB390_DVBC2_PLP_BLK_1,
	TVB390_DVBC2_PLP_HEM_1,
	TVB390_DVBC2_PLP_TSPATH_1,
	TVB390_DVBC2_PLP_FILEBITRATE_1,
	TVB390_DVBC2_PLP_PLPBITRATE_1,				//408
	TVB390_DVBC2_PLP_ID_2,
	TVB390_DVBC2_PLP_MOD_2,						//410

	TVB390_DVBC2_PLP_COD_2,
	TVB390_DVBC2_PLP_FEC_2,
	TVB390_DVBC2_PLP_BLK_2,
	TVB390_DVBC2_PLP_HEM_2,
	TVB390_DVBC2_PLP_TSPATH_2,
	TVB390_DVBC2_PLP_FILEBITRATE_2,
	TVB390_DVBC2_PLP_PLPBITRATE_2,
	TVB390_DVBC2_PLP_ID_3,
	TVB390_DVBC2_PLP_MOD_3,
	TVB390_DVBC2_PLP_COD_3,						//420

	TVB390_DVBC2_PLP_FEC_3,
	TVB390_DVBC2_PLP_BLK_3,
	TVB390_DVBC2_PLP_HEM_3,
	TVB390_DVBC2_PLP_TSPATH_3,
	TVB390_DVBC2_PLP_FILEBITRATE_3,
	TVB390_DVBC2_PLP_PLPBITRATE_3,				//426
	TVB390_DVBC2_PLP_ID_4,
	TVB390_DVBC2_PLP_MOD_4,
	TVB390_DVBC2_PLP_COD_4,
	TVB390_DVBC2_PLP_FEC_4,						//430

	TVB390_DVBC2_PLP_BLK_4,
	TVB390_DVBC2_PLP_HEM_4,
	TVB390_DVBC2_PLP_TSPATH_4,
	TVB390_DVBC2_PLP_FILEBITRATE_4,
	TVB390_DVBC2_PLP_PLPBITRATE_4,				//435
	TVB390_DVBC2_PLP_ID_5,
	TVB390_DVBC2_PLP_MOD_5,
	TVB390_DVBC2_PLP_COD_5,
	TVB390_DVBC2_PLP_FEC_5,
	TVB390_DVBC2_PLP_BLK_5,						//440

	TVB390_DVBC2_PLP_HEM_5,
	TVB390_DVBC2_PLP_TSPATH_5,
	TVB390_DVBC2_PLP_FILEBITRATE_5,
	TVB390_DVBC2_PLP_PLPBITRATE_5,				//444
	TVB390_DVBC2_PLP_ID_6,						//445
	TVB390_DVBC2_PLP_MOD_6,		
	TVB390_DVBC2_PLP_COD_6,
	TVB390_DVBC2_PLP_FEC_6,
	TVB390_DVBC2_PLP_BLK_6,
	TVB390_DVBC2_PLP_HEM_6,						//450					

	TVB390_DVBC2_PLP_TSPATH_6,
	TVB390_DVBC2_PLP_FILEBITRATE_6,
	TVB390_DVBC2_PLP_PLPBITRATE_6,				//453
	TVB390_DVBC2_PLP_ID_7,
	TVB390_DVBC2_PLP_MOD_7,
	TVB390_DVBC2_PLP_COD_7,
	TVB390_DVBC2_PLP_FEC_7,
	TVB390_DVBC2_PLP_BLK_7,
	TVB390_DVBC2_PLP_HEM_7,
	TVB390_DVBC2_PLP_TSPATH_7,					//460

	TVB390_DVBC2_PLP_FILEBITRATE_7,
	TVB390_DVBC2_PLP_PLPBITRATE_7,				//462

	TVB390_DVBC2_SET_CMD,						//463
	//========================================================================

	//2011/9/26 DVB-T2 IP ====================================================
	TVB390_DVBT2_IP_PLP_MOD,					//464
	TVB390_DVBT2_IP_PLP_COD,					//465
	TVB390_DVBT2_IP_PLP_FEC,					//466
	TVB390_DVBT2_IP_PLP_ID,						//467
	TVB390_DVBT2_IP_PLP_HEM,					//468
	TVB390_DVBT2_IP_PLP_ROT,					//469
	//========================================================================
	//2011/10/26 DAC OFFSET ==================================================
	TVB390_DAC_RF_RANGE,						//470
	TVB390_DAC_I_OFFSET,
	TVB390_DAC_Q_OFFSET,
	TVB390_DAC_I_OFFSET_READ,
	TVB390_DAC_Q_OFFSET_READ,
	TVB390_DAC_MODULATION_MODE,					//475
	//========================================================================
	//2011/11/08 I/Q PLAY ====================================================
	TVB390_IQPLAY_SPECTRUM,						//476
	TVB390_IQPLAY_USE_CAPTURE,					//477
	TVB390_IQPLAY_MEM_USE,						//478
	TVB390_IQPLAY_MEMORY_SIZE,					//479
	TVB390_IQPLAY_CAPTURE_SUPPORT,				//480
	TVB390_IQPLAY_CAPTURE_FILENAME,				//481
	//========================================================================
	
	//2012/1/12 USB/SDCARD MOUNT
	TVB390_USB_MOUNT_STATUS,					//482
	TVB390_SDCARD_MOUNT_STATUS,					//483

	//2012/5/11
	TVB390_SET_SYSTEM_CLOCK,					//484

	//2012/10/5
	TVB390_BERT_PID_VALUE,						//485
	//2012/10/8
	TVB390_FILE_POS_CHANGE,						//486

	TVB390_DVB_T2_PLP_IL,
	TVB390_DVB_T2_PLP_IL_1,
	TVB390_DVB_T2_PLP_IL_2,
	TVB390_DVB_T2_PLP_IL_3,							//490
	TVB390_DVB_T2_PLP_IL_4,
	TVB390_DVB_T2_PLP_IL_5,							//492
	TVB390_DVB_T2_PLP_IL_6,
	TVB390_DVB_T2_PLP_IL_7,							//494
	TVB390_DVB_T2_IP_PLP_IL,							//495
	
	TVB59x_TS_OUTPUT_SEL,								//496
	
	TVB390_RESERVED2,
	TVB390_RESERVED3,
	TVB390_RESERVED4,
	TVB390_RESERVED5,
	
	TVB390_SNMP_MAX
} tSnmpMsgType;
#endif

typedef enum _tSnmpListUpDown
{
    TVB390_LIST_DOWN = 0,
    TVB390_LIST_UP
} tSnmpListUpDown;

typedef enum _ErrorCode
{
    //   Error Code from DLL
    TLV_UNKNOWN_ERR = -1,
    TLV_NO_DRIVER = -2,
    TLV_NO_DEVICE = -3,
    TLV_NO_RBF = -4,
    TLV_FILE_READ_ERR = -5,
    TLV_DRV_ERR = -6,
    TLV_DOWNLOAD_ERR = -7,
    TLV_DMAM_ALLOC_ERR = -8,
    TLV_NO_TS_SYNC_ERR = -11,
    TLV_TOO_BIG_FILE_TO_WRITE_ERR = -12,
    TLV_FAIL_TO_START_PLAY_THREAD = -13,
    TLV_FAIL_TO_START_RECORD_THREAD = -14,
    TLV_FAIL_TO_STOP_DRV = -15,
    TLV_NO_DRV_FOR_SET_SYS = -16,
    TLV_FAIL_TO_CLOSE_TSP_DRV = -17,
    TLV_ALTERA_FILE_READ_ERR = -18,
    TLV_FAIL_TO_CREATE_LOG_FILE = -19,
    TLV_FAIL_TO_CREATE_RECORD_FILE = -20,
    TLV_INVALID_ARGUMENT = -21,
    TLV_FAIL_TO_STOP_PLAY = -22,
    TLV_FAIL_TO_CONFIGURE_EPLD = -23,
    TLV_RS232C_TX_ERROR = -24,
    TLV_FAIL_TO_START_MONITOR_THREAD = -25,
    TLV_FAIL_TO_START_IP_STREAMING = -30,
    TLV_INVALID_DTMB_PARAMS = -31,
    TLV_INVALID_LOOP_ADAPT = -32,
    TLV_INVALID_WHEN_PLAYING_OR_RECORDING = -33,
    TLV_INVALID_FRONT_KEY_INPUT = -34,
    TLV_FAIL_TO_SET_RF_LEVEL = -35,
    TLV_FAIL_TO_SET_CNR = -36,
    TLV_FAIL_TO_CHECK_LICENSE = -37,

    TLV_FAIL_TO_GET_FILE_SIZE = -38,
    TLV_FAIL_TO_SHOW_FILE_INFO = -39,
    TLV_READ_ONLY_FILE = -40,
    TLV_FILE_NOT_FOUND = -41,
    TLV_FAIL_TO_REMOVE_FILE = -42,
    TLV_FAIL_TO_REFESH_PLAY_LIST = -43,
    TLV_FILE_LIST_EMPTY = -44,
    TLV_PLAY_LIST_FULL = -45,
    TLV_FAILT_TO_ADD_TO_PLAY_LIST = -46,
    TLV_EXCEED_LAYER_CAPACITY = -47,
    TLV_INVALID_TMCC_PARAMETER = -48,
    TLV_LAYER_A_1_SEGMENT = -49,
    TLV_PARTIAL_RECEPTION_CHECK = -50,
    TLV_ONLY_LAYER_A_1_SEGMENT = -51,
    TLV_TOO_MANY_TASKS = -52,
    TLV_INVALID_WAKE_UP_FORMAT = -53,
    TLV_INVALID_DURATION_TIME = -54,
    TLV_ASI_UNLOCKED = -55,
    TLV_310M_UNLOCKED = -56,
    TLV_FIFO_FULL = -57,
    TLV_FIFO_EMPTY = -58,
    TLV_MODULATOR_TX_DISABLED = -59,
    TLV_9857_PLL_UNLOCKED = -60,
    TLV_MODULATOR_UNLOCKED = -61,
    TLV_PLAY_FIFO_FULL = -62,
    TLV_FAIL_TO_DETECT_BOARD = -63,

    TLV_REMOVE_FILE_CONFIRMED = -64,
    TLV_TMCC_UPDATED = -65,
    TLV_SELECT_A_WEEKDAYS = -66,
    TLV_SELECT_A_DAY_OF_MONTH = -67,
    TLV_INPUT_BITRATE = -68,
    TLV_RECORDING = -69,
    TLV_RECODRING_STOPPED = -70,
    TLV_PLAYING_STOPPED = -71,
    TLV_DELAYING_STOPPED = -72,
    TLV_BUFERING = -73,
    TLV_PLAYING = -74,
    TLV_WAITING = -75,
    TLV_INPUT_SOURCE_CHANGED = -76,
    TLV_ENTER_DELETE = -77,
    TLV_SELECT_INPUT_SOURCE = -78,

    TLV_REMOVE_FILE_ABORTED = -79,
    TLV_MOUSE_OPERATION_REQUIRED = -80,
    TLV_TS_RATE_OUT_OF_RANGE = -81,
    TLV_LOOP_PLAY_MODE = -82,
    TLV_ONCE_PLAY_MODE = -83,
    TLV_IP_RECV_OUTPUT_RATE = -84,

    TLV_FAIL_TO_UPDATE_LICENSE_DATA = -85,
    TLV_FAIL_TO_BACKUP_LICENSE_DATA = -86,
    TLV_UPDATE_LICENSE_DATA = -87,
    TLV_OUT_OF_RF_RANGE = -88,
    TLV_SYMBOL_RATE_OUT_OF_RANGE = -89,		//20090812

    TLV_ALREADY_RUNNING = -200,
    TLV_PLAY_FILE_SIZE_IS_ZERO = -201,
    TLV_NO_FILE_TO_RECORD = -202,
    TLV_EXIT_SYSTEM = -300,
    TLV_DEBUG_ERR = -301,
} ErrorCode;

typedef enum _BtnOfForm
{
	FMODUPARA_CHK_IN_DEPTH = 0,
	FMODUPARA_CHK_MPE_FEC,
	FMODUPARA_CHK_TIME_SLICE,

} BtnOfForm;

//kslee Added 2010/1/4
typedef enum _ChipSet
{
    FPGA = 0,
    PCI,
	AD9775
} ChipSet;

#ifndef WIN32
struct _SNMP_SIMPLE_MSG_BUF 
{
	int 	mtype;
	char 	strParam[256];
};

//2011/1/4 TMCC Setting ============================
typedef struct _TMCC_LAYER_INFO
{
	int seg;
	int mod;
	int cod;
	int time;
	int  bitrate;
	int  datarate;
	int count;
	char info[1024];
} TMCC_LAYER_INFO;

typedef struct _TMCC_INFO
{
	int broadcast;
	int mode;
	int guard;
	int partial;
	int other_pid_map_to_layer;
	int multi_pid_map;
	TMCC_LAYER_INFO layerA;
	TMCC_LAYER_INFO layerB;
	TMCC_LAYER_INFO layerC;
	int layer_total_count;
	char layer_total_info[1024];
} TMCC_INFO;
//gpConfig->gBC[nBoardNum].tmccInfo.layerA.cod
//==================================================
#endif
#ifdef WIN32
typedef struct _T2MI_Plp_Param
{
	char id;
	char type;
	char mod;
	char cod;
	char fec;
	int blk;
	char hem;
	char rot;
	char interleave_length;
	int bitrate;
} T2MI_Plp_Param;

typedef struct _T2MI_Parsing_Info
{
	char bw;
	char bwt;
	char fft_mode;
	char guard_interval;
	char l1_modulation;
	char pilot_pattern;
	unsigned int frequency;
	int network_id;
	int t2_system_id;
	int cell_id;
	int pid;
	int papr;
	char superframe;
	int data_symbols;
	int error_flag;	//bit 0 ~ : MISO, FFT SIZE, PAPR, FEF, Rotation, Frame interval, Time interleaving length, Time interleaving type
	T2MI_Plp_Param sPlp_Info[MAX_PLP_TS_COUNT];
} T2MI_Parsing_Info;
#endif
//-------------------------------------------------------------------------
// Each Board Configuration
// It is from variable.bas xxx[MAX_BOARD_COUNT+1]
typedef struct _BOARD_CONFIG
{
	//----------------------------------------------------------------------------
	// General
	char			gszMasterDirectory[256];            // TS root directory
#ifdef WIN32
	char			gszSingleFileName[256];
#endif
	bool			gbRepeatMode;                       // repeat mode : single or repeat
    long	        gdwPlayRate;                        // playback rate in bps
	long			gnSubBankNumber;                    // # of sub bank (Max 7)
	long			gnSubBankOffset;                    // size of sub bank (Max 1024)
	long			gnStartOffset;                      // Start offset when the playback starts.
	long			gnRestamping;                       // PCR/PTS/DTS loop adaptation
	long			gnCalcPlayRate;                     // fixed playrate on the files of PLAY LIST Box

	// Loop Adaptation
	long			gnContinuity;                       // Continuity loop adaptation
	long			gnDateTimeOffset;                   // TDT/TOT loop adaptation
	
	//----------------------------------------------------------------------------
	// Maybe not used or Optionally used
	long			gnOutputClockSource;                // Use of burst playrate
	long			gnUseFrontInput;                    // Use of front key pad of TPG430B
	long			gnUseDemuxblockTest;                // For Test
	
	//----------------------------------------------------------------------------
	// Modulator General
	long			gnStopMode;					        // Stop mode option (NULL packet generation)
	long			gnModulatorMode;			        // 0:DVB-T, 1:VSB, 2:QAM-A, 3:QAM-B, 4:QPSK, 5:TDMB, 6:16VSB  ~ 11: DTMB
	unsigned long	gnRFOutFreq;                        // RF output Frequency in unit of Hz
	unsigned long	gnSymbolRate;                       // Symbolrate in unit of Baud

	//----------------------------------------------------------------------------
	// Modulator Specific
	long			gnCodeRate;					        // 0 ~ 4 for 1/2, 2/3, 3/4, 5/6, 7/8
	long			gnBandwidth;				        // 0(6MHz), 1(7MHz), 2(8MHz)
	long			gnTxmode;					        // 0(2K), 1(8K), 2(4K) if DVB-H
	long			gnGuardInterval;			        // 0(1/4), 1(1/8), 2(1/16), 3(1/32)
	long			gnConstellation;			        // 0(QPSK), 1(16QAM), 2(64QAM)
	long			gnQAMMode;					        // 0(16QAM) - 4(256QAM)
    long            gnQAMInterleave;                    // 0(128-1) - (128-8)
	long			gnSpectrumInverse;			        // 0(off), 1(on)
	long			gnIFOutFreq;				        // MHz, 0:36, 1:40, 2:36.125(TVB380V3 under)
	long			gnPRBSmode;					        // 0(none), 1(2^7-1), 2(2^10-1), 3(2^15-1), 4(2^23-1)
	double         	gnPRBSscale;				        // 0 ~ 50 dB
	double			gdwAttenVal;				        // 0~31.5
	long			gnModulatorSource;		        	// 0:FILE, 2:FILE Dummy, 3:ASI,
	
	//--- DVBH
	long			gnMPE_FEC;                          // on/off
	long			gnTime_Slice;                       // on/off
	long			gnIn_Depth;                         // interleaving mode in DVB-H 
	unsigned long	gnCell_Id;                          // Cell ID of DVB-H
	
	//--- DVBS2
	long			gnPilot;					        // 0=off, 1=on
	long			gnFreqPolicy;				        // 1=NTSC Carrier, RF = USER RF + 1.750MHz
	long			gnRollOffFactor;			        // 0=0.20, 1=0.25, 2=0.35 
	
	//--- For Keisoku
	long			gnRFOutFreqUnit;                    // Hz/KHz/MHz
	long			gnRemoveFileEnabled;                // Validate File remove
	long			gnTDMBSubBankOffset;                // Bank offset of TDMB : default = 128
	
	//--- AV Decoding. IP Streaming
	long			gnIPStreamingMode;                  // NO/SEND/RECV
	long			gnIPStreamingPath;                  // Input/Output
	long			gnIPStreamingAccess;                // UDP/HTTP/RTSP
	char			gnIPStreamingAddress[24];           // IP address
	char			gnIPStreamingPort[10];              // IP Port
	char			gszIPStreamingInfo[256];             // text string for VLC
	char			gszIPStreamingInputInfo[256];        // text string for VLC
	long			gnIPSubBankOffset;                  // Subbank offset for IP
	long			gnUseIPStreaming;                   // Use of IP streaming
	long			gnUseAVDecoding;                    // Use of AV Decoding using VLC

	//--- SNMP
	char			gszSnmpRemoteHost[24];              // default 127.0.0.1
	int				gnSnmpLocalPort;                    // default 8000
	int				gnSnmpRemotePort;                   // default 8239
	
	//--- Command line
	bool			gnCmdInitFW;                        // Firmware load at initialization
	long			gnCmdPlayrate;                      // command line playrate
	char			gnCmdFileName[256];                 // command line filename
	long			gnCmdAutoRun;                       // Autorun
	
	//--- Scheduled Task
	char			gnCmdAutoExitTime[24];              // Scheduled program exit time
	long			gnCmdAutoExitDone;                  // Scheduled program done
	char			gnCmdAutoExitDate[24];              // scheduled program exit date
	long			gnCmdDurationTime;                  // scheduled program execution duration

	//--- TVB595V1
	long			gnBypassAMP;                        // Use of bypass Amp
	long			gnNationalCode;                     // National code for channel table
	long			gnChannelType;                      // type of channel table
	
	long			gnUseTMCCRemuxer;                   // Use of TMCC Remuxer
	double			gdwAttenExtVal;                     // value of External attenuation
	
	//--- DTMB
	long			gnFrameHeader;                      // DTMB Modulation parameter
	long			gnCarrierNumber;                    // DTMB Modulation parameter
	long			gnFrameHeaderPN;                    // DTMB Modulation parameter
	long			gnPilotInsertion;                   // DTMB Modulation parameter

	double			gRFPowerLevel;                      // attenuation value
	long			gnBertPacketType;                   // BERT packet type

	//--- Nano Soltech
	long			gnUseAmp_NanoSolTech;               // Use of External NanoSoltec attenuation
	double			gRFPowerLevel_NanoSolTech;          // value of NanoSoltec attenuation
	long			gnCommPort_NanoSolTech;             // COM port of NanoSoltec attenuation
	
	//--- Error Injection                               //===> Error Packet Generation variables
	long			gnErrLost;                          // omit some TS packet ?
	long			gnErrBits;                          // use of bit-error ?
	long			gnErrBytes;                         // use of byte-error ?
	long			gnErrBitsCount;                     // the ratio of bit error
	long			gnErrBytesCount;                    // the ratio of byte error
	long			gnErrLostPacket;                    // The ratio of TS packet omission
	long			gnErrBitsPacket;                    // how many bit error per packet
	long			gnErrBytesPacket;                   // how many byte error per packet
	
	//--- ISDBT
	long			gnHexDisplay;                       // Hexadecimal display in SI information
	long			gnHexDisplayTMCC;                   // Hexadecimal display in ISDBT TMCC Remuxer
					
	//--------------------------------------------------------
	// General configuration
	double			gRFPowerLevelOffset;				// 20090812

	bool			bPlayingProgress;                   // Is playing ?
	bool			bDeleteAsked;                       // File delete asked ?

#ifndef WIN32
	long			gnLoadPidInfo;                      // load pid information in ISDBT TMCC Remuxer
	tActiveFocus    fCurFocus;                          // FILELIST or PLAYLIST Box ?
#endif

	int				nFileListIndexCur;                  // index of File List Box
	int				nFileListIndexCount;                // item count of FileList Box
	int				nPlayListIndexCur;                  // index of Play List Box
	int				nPlayListIndexDisplay;              // index for current playing
	int				nPlayListIndexStart;                // index at which playing started
	int				nPlayListIndexCount;                // item count of PlayList Box
	bool			bForcedPlayRate;                    // not used. always false
	
	__int64			dwFileSize;                         // size in unit of BYTE of current selected file
	int				nFocusInput;                        // For menu navigation. not used

	bool			bRecordInProgress;                  // Is recording progressing ?
	bool			bDelayinProgress;                   // Is delaying progressing ?
	int				nLastHLDThreadState;                // HLDThread state
	int				nWaitProgressCnt;                   // no important
	__int64			dwLastRecordedBytes;                // record size

	char			szCurFileName[512];                 // current filename for playing or recording
#ifndef WIN32 
	char			szFileFileList[MAX_PLAY_LIST_COUNT][256];   //pathfilename in filelist box	
#endif
	char			szPlayFileList[MAX_PLAY_LIST_COUNT][256];   //pathfilename in playlist box
#ifdef WIN32
	char			gszListDirectory[256];            // TS root directory
	char			szPlayListFileName[MAX_PLAY_LIST_COUNT][256];
	long			gnPlayListPlaybackRate[MAX_PLAY_LIST_COUNT];
	long			gnPlayListAtscMh_Format[MAX_PLAY_LIST_COUNT];
#endif
	long			gnBoardStatus;		                // 0=deactivated,  1=activated
	int				gnBoardId;                          // board ID
	long			gnOpenSystem;		                // 0=Before calling Open_System,  1=After calling Open_System
	
	long			tPlayrate;                          // temporary playrate in ISDB-T TMCC Remuxing
	
	char			tLastUpdatedPath[256];              // last filename used in TMCC remuxing
	
	long			gnIPTotalProgram;                   // total program count
	long			gnIPCurrentProgram;                 // current program
	long			gnIPProgramList[64];                // program list
	long			gnRFAmpUsed;                        // Is RF Amp Used ?

	__int64			gnStartPos;                         // Start position in BYTE
	__int64			gnCurrentPos;                       // Current position in BYTE
	__int64			gnEndPos;                           // End position in BYTE
	long			gnStartSliderPos;                   // Slider start position : not used
	long			gnEndSliderPos;                     // Slider end position: not used
	
	int				gnStartPosChanged;                  // Start position changed
	int				gnCurrentPosChanged;                // Current position changed
	int				gnEndPosChanged;                    // End position changed
	int				gnCurrentPosScrolled;               // Current position scrolled: not used

	long			gnStartTimeOffset;                  // Start position in seconds
	long			gnEndTimeOffset;                    // End position in seconds
	long			gnOffsetMargin;                     // Comparison margin in seconds. currently always 0
	long			gInvalidBitrate;                    // can't calculate playrate.
	
	
	long			gnVideoPosX;                        // left position of Video window
	long			gnVideoPosY;                        // top  position of Video Window
	long			gnVideoWidth;                       // Width of Video Window
	long			gnVideoHeight;                      // Height of Video Window
	
	long			gnTAT4710;                          // Use of TAT4710 external attenuation
	
	long			gnUseSubLoop;                       // Use subloop in playback of file
	long			gnUseSubLoop_Command;

	double			gnMaxRFLevel;                       // Maximum RF level
	double			gnMinRFLevel;                       // Minimum RF level
	long			gnPrevPlayrate;                     // temporary value for playrate
	unsigned long	gnPrevSymbolrate;                   // temporary value for symbolrate
	long			gnRepeatCount;                      // Wrap counter of file playback

	long			gnActiveMixerUsed;                  // for Advanced user

    //-----------------------------------
    // From TimeSub.bas
    long            dwStartTime;                        // When Play/Record started in msec, wrap around at midnight. 0~863999
    long            dwLastTimeInMsec;                   // Current time in unit of milliseconds
    long            dwMsecCounter;                      // 1/10 sec counter for elapsed time

    //-----------------------------------
    // yuricho Added
    unsigned char   gbEnabledType[MAX_MODULATORMODE];   // Is each modulator type enabled ?
    int             giNumModulator;                     // # of supported modulator mode
    long            giTypeComboMod[MAX_MODULATORMODE];  // nth modulation mode type in modulation type combo box

	//kslee Added
	long			gnAGC;								//AGC - RF Level -> Atten/AGC
	//CMMB
	long			gnCMMB_Params[MAX_CMMB_TIME_SLOT_COUNT][MAX_CMMB_PARAM_COUNT];
	long			gnCMMB_Params_Count;
	//TDT/TOT - USER DATE/TIME
	char			gnDateTimeOffset_Date[20];
	char			gnDateTimeOffset_Time[20];
	//kslee091218
	double			gnDisRFLevel;
	double			gnAtten_Min;
	double			gnAtten_Max;
	
	double			gdwAGCAttenOffset;

#ifdef WIN32
	long			downflag;
	char			gszOldLN[40];

#endif 

	long			gnBoardRev;
	long			gnErrorStatus;

#ifndef WIN32
//2012/2/29 LINUX Merge ===============================================================
	char			gszCmmb_Mdif[256];
	long			gnCmmb_Mdif;
	long			gnCmmb_const;
	long			gnCmmb_rscoding;
	long			gnCmmb_bytecrossing;
	long			gnCmmb_ldpc;
	long			gnCmmb_scramble;
	long			gnCmmb_timeslice;
	char			gsz_T2MI_Parameter[17][256];
	char			gsz_ATSC_MH_Parameter[9][256];
	char			gsz_Tmcc_RemuxInfo[9][256];
	//2011/3/25 DVB-T2 MULTI-PLP =====================================================================================================
	char			szDvbt2_FileList[MAX_PLAY_LIST_COUNT][256];   //pathfilename	
	char			szDvbt2_FileName[256];
	long			gnDvbt2_FileListCount;
	char			szDvbt2_Directory[256];
	long			gnDvbt2_bitrate;
	long			gnSnmp_DAC_I_Offest;
	long			gnSnmp_DAC_Q_Offset;
	long			gnSnmp_RF_Index;
	char			szRemux_FileName[256];
	TMCC_INFO		tmccInfo;
//=====================================================================================

	long			gnDefaultSymbol;
	//kslee 2010/5/24
	long			gnAuto_Play;
	char			gszAuto_Play_FileName[256];
	//2011/1/4 TMCC Setting
#endif
	long			gnChangeModFlag;
#ifdef WIN32
	long			gnBoardStatusReset;
#endif
	//DAC - Offset, Gain
	//long			gDAC_I_Offset;
	//long			gDAC_Q_Offset;
	//2011/5/30 DAC FREQ RANGE=====>>
	long			gDAC_I_Offset[MAX_DAC_FREQ_RANGE_V4];
	long			gDAC_Q_Offset[MAX_DAC_FREQ_RANGE_V4];

	//<<=============================
	//long			gDAC_I_Gain;
	//long			gDAC_Q_Gain;
	
	//kslee 2010/3/18 TGP0590S V6.12.03
	//long			gDAC_I_Offset_Coarse;
	//long			gDAC_Q_Offset_Coarse;
	long			gDAC_Mod_Mode;

	//PCR RESTAMP
	long			gnPCR_Restamping;

	//IP UDP/RTP
	char			gszIP_RxIP[64];
	char			gszIP_RxMulticatIP[64];
	char			gszIP_RxLocalIP[64];
	long			gnIP_RxPort;
	long			gnIP_Rx_Bitrate_Control;
	long			gnIP_RxMulticatIP;
#ifndef WIN32
	long			gnIP_InputRate;
#endif

	//2010/5/28 DVB-T2
	long			gnBitrate_Adjustment_Flag;
	long			gnT2MI_BW;
	long			gnT2MI_BWT;
	long			gnT2MI_FFT;
	long			gnT2MI_GUARD;
	long			gnT2MI_L1_MOD;
	long			gnT2MI_PILOT_PATTERN;
	long			gnT2MI_MISO;
	long			gnT2MI_PAPR;
	long			gnT2MI_NETWORK_ID;
	long			gnT2MI_T2_SYSTEM_ID;
	long			gnT2MI_CELL_ID;
	long			gnT2MI_PID;
	long			gnT2MI_NUM_T2_FRAME;
	long			gnT2MI_NUM_DATA_SYMBOL;
//2010/12/20 DVB-T2 MULTI-PLP ==================================================================================
//	long			gnT2MI_PLP_TYPE;
//	long			gnT2MI_PLP_MOD;
//	long			gnT2MI_PLP_COD;
//	long			gnT2MI_PLP_FEC_TYPE;
//	long			gnT2MI_HEM;
//	long			gnT2MI_PLP_NUM_BLOCK;
	long			gnT2MI_PLP_ID[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_TYPE[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_MOD[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_COD[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_FEC_TYPE[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_HEM[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_NUM_BLOCK[MAX_PLP_TS_COUNT];
	char			gszT2MI_PLP_FilePath[MAX_PLP_TS_COUNT][512];
	long			gnT2MI_PLP_Playrate[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_MAX_Playrate[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_Rotation[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_ORG_Playrate[MAX_PLP_TS_COUNT];
	long			gnT2MI_PLP_Time_Interleave[MAX_PLP_TS_COUNT];
//==============================================================================================================
	//Fault/Status trigger
	long			gnBoardAuth;

	//2010/8/31 FIXED - IF +- offset
	long			gnCurrentIF;

	//2010/9/13 FIXED - ISDB-T Emergency Broadcasting Control
	long			gnEmergencyBroadcasting;

	//2010/7/18
	long			gnIQ_mode;
	long			gnIQ_play_mode;
	long			gnIQ_capture_mode;
	long			gnIQ_mem_use;
	long			gnIQ_mem_size;
	long			gnIQ_play_support;
	long			gnIQ_capture_support;
	char			gszIQ_capture_filePath[512];

	//2010/12/06 ISDB-S =============================================================================================================
	char			gszTS_M[MAX_TS_COUNT][512];
	long			gnTS_Bitrate_M[MAX_TS_COUNT];
	long			gnConstellation_M[MAX_TS_COUNT];
	long			gnCoderate_M[MAX_TS_COUNT];
	long			gnSlotCount_M[MAX_TS_COUNT];
	long			gnTS_Selected_M[MAX_TS_COUNT];
	long			gnTS_ID_M[MAX_TS_COUNT];
	long			gnSlotCount;
	//================================================================================================================================

	//2011/2/11 ISDB-S Combined TS
	int				gnCombinedTS;

	//2011/2/23 DVB-C2 ===============================================================================================================
	int				gnDVB_C2_BW;
	int				gnDVB_C2_L1;
	int				gnDVB_C2_Guard;
	int				gnDVB_C2_Network;
	int				gnDVB_C2_System;
	int				gnDVB_C2_StartFreq;
	int				gnDVB_C2_NumNoth;
	int				gnDVB_C2_ReservedTone;
	int				gnDVB_C2_NotchStart;
	int				gnDVB_C2_NotchWidth;
	int				gnDVB_C2_Dslice_TunePos;
	int				gnDVB_C2_Dslice_OffsetRight;
	int				gnDVB_C2_Dslice_OffsetLeft;
	//2011/5/17 DVB-C2 MULTI-PLP
	int				gnDVB_C2_Plp_ID[DVB_C2_MAX_PLP_TS_COUNT];
	int				gnDVB_C2_Dslice_type;
	int				gnDVB_C2_Dslice_FecHeader;
	int				gnDVB_C2_Plp_Mod[DVB_C2_MAX_PLP_TS_COUNT];
	int				gnDVB_C2_Plp_Code[DVB_C2_MAX_PLP_TS_COUNT];
	int				gnDVB_C2_Plp_Fec[DVB_C2_MAX_PLP_TS_COUNT];
	int				gnDVB_C2_Plp_Blk[DVB_C2_MAX_PLP_TS_COUNT];
	// merge from linux version
	int				gnDVB_C2_PLP_HEM[DVB_C2_MAX_PLP_TS_COUNT];
	int				gnDVB_C2_Dslice_BBHeader[DVB_C2_MAX_PLP_TS_COUNT];
	char            gnDVB_C2_Plp_FileName[DVB_C2_MAX_PLP_TS_COUNT][512];
	int             gnDVB_C2_Plp_File_Bitrate[DVB_C2_MAX_PLP_TS_COUNT];
	int             gnDVB_C2_Plp_Plp_Bitrate[DVB_C2_MAX_PLP_TS_COUNT];
	//int				gnDVB_C2_Plp_MAX_Playrate[DVB_C2_MAX_PLP_TS_COUNT];
	//2011/6/2
	int				gnDVB_C2_CreateFile;
	//================================================================================================================================

	//2011/4/4 ISDB-S Bitrate
	char			gszISDBS_MultiCombine_BaseTS[512];
	int				gnISDBS_BaseBitrate;

	//2011/4/13
	long			gnFileBitrate;
	long			gnPlaybackBitrate;
	long			gnFilePacketSize;

	//2011/5/4
	long			gnAD9852_Overclock;

	//2011/6/29 TAT4710
	long			gnUseTAT4710;

//2011/7/15 DVB-T2 IP ==================================================================================
	long			gnIP_T2MI_BW;
	long			gnIP_T2MI_BWT;
	long			gnIP_T2MI_FFT;
	long			gnIP_T2MI_GUARD;
	long			gnIP_T2MI_L1_MOD;
	long			gnIP_T2MI_PILOT_PATTERN;
	long			gnIP_T2MI_MISO;
	long			gnIP_T2MI_PAPR;
	long			gnIP_T2MI_NETWORK_ID;
	long			gnIP_T2MI_T2_SYSTEM_ID;
	long			gnIP_T2MI_CELL_ID;
	long			gnIP_T2MI_PID;
	long			gnIP_T2MI_NUM_T2_FRAME;
	long			gnIP_T2MI_NUM_DATA_SYMBOL;
	long			gnIP_T2MI_PLP_TYPE;
	long			gnIP_T2MI_PLP_MOD;
	long			gnIP_T2MI_PLP_COD;
	long			gnIP_T2MI_PLP_FEC_TYPE;
	long			gnIP_T2MI_PLP_NUM_BLOCK;
	long			gnIP_T2MI_PLP_ID;
	long			gnIP_T2MI_PLP_HEM;
	char			gszIP_T2MI_PLP_FilePath[512];
	long			gnIP_T2MI_PLP_Playrate;
	long			gnIP_T2MI_PLP_Rotation;
	long			gnIP_T2MI_PLP_ORG_Playrate;
	long			gnIP_T2MI_PLP_Time_Interleave;
//==============================================================================================================

	__int64			gnIP_TimeCnt;

	//2011/10/17 added PI
	int				gnLNB_Index;
	int				gnSubLoopEndPos;

	//2011/10/24 added PAUSE
	int				gnPause;
	int				gnPause_StartTime;
	int				gnPause_EndTime;

	//2011/11/10 ISDB-T 13seg 188 TS Loopthru ===============
	long			gnIsdbt13_LoopThru_bitrate;

	//2011/11/18 IQ NEW FILE FORMAT
	long			gnIQ_CaptureSize;
	long			gnIQ_ErrorCheck;
	long			gnIQ_ErrorCheckSize;

	//2011/11/22 improve ISDB-T UI
	long			gnHaveTMCC;
	long			gn_IsVirtualSlot;
	long            gn_StreamNum;
	long			gn_OwnerSlot;
	int				gnRealandvir_location;
	long			gnRealandvir_cnt;

	int				gnISDBS_channelNum;

	//2011/12/15 DVB-C2 IP===============================================================================================================
	//2011/5/17 DVB-C2 MULTI-PLP
	int				gnDVB_C2_IP_Plp_ID;
	int				gnDVB_C2_IP_Plp_Mod;
	int				gnDVB_C2_IP_Plp_Code;
	int				gnDVB_C2_IP_Plp_Fec;
	int				gnDVB_C2_IP_Plp_Blk;
	int				gnDVB_C2_IP_HEM;
	char            gnDVB_C2_IP_Plp_FileName[512];
	int             gnDVB_C2_IP_Plp_File_Bitrate;
	int             gnDVB_C2_IP_Plp_Plp_Bitrate;
	//================================================================================================================================

	int				gnDebugMode_FilePlay;
	double			gdwLevel_Max_display;
	double			gdwLevel_Min_display;

#ifndef WIN32 
	int				gnIsdbT_LoopThru_flag; 
#endif


	//2012/4/13 SINGLE TONE
	int				gnSingleToneEnabled;
	int				gnSingleTone;

	//2012/8/17
	int				gnRfLevel_Unit;

	//2012/8/31 new rf level control
	double			gdRfLevelValue;
	double			gdRfLevelRange_min;
	double			gdRfLevelRange_max;

	//2012/9/6 pcr restamp control
	int				gnPcrReStampingFlag;

	//2012/9/28 BERT PID
	long			gnBert_Pid;
	//2012/11/09 TDMB
	long			gnETI_Format;
	//2012/12/17 ATSC-MH
	long			gnATSC_MH_Format;
	long			gnTsOutput_Mode;	//0: DVB-ASI, 1: SMPTE-310M
#ifdef WIN32
	long			gnOutput_T2MI;
	char			gszOutput_Filename[512];
	long			gnT2MI_StreamGeneration;
	//2013-02-14
	long			gnInputSource;		// 0: File single, 1: File List, 2: Re_mux File, 3: PRBS data, 4: DVB-ASI, 5: SMPTE-310M, 6: IP
	long			gnOutputType;		// 0: RF signal, 1: File
	long			gnSet_ParamFlag;
	long			gnPlaybackTime;
	long			gnRfLevel_Increment;
	long			gnChannelNum;
	T2MI_Parsing_Info gsT2mi_info;
	long			gnVLC_ScreenSize;
	int				gnSupport_Rbf_revision;
	int				gnSupport_ts_Pkt_cnt_cntl;

	__int64		gnAsi_IN_Bitrate;
	__int64		gnAsi_OUT_Bitrate;
	__int64		gnAsi_InOut_Count;
	int				gnAsiLock_status;
	int				gnAsi_Init_Flag;
	int				gnAsi_SymbolClock;
	int				gnAsi_SymbolClock_Max;
	int				gnAsi_SymbolClock_Min;

	int				gnBoardStatus_ContCnt;
	
#endif
	int				gnBoardDac_i_offset;
	int				gnBoardDac_q_offset;
} BOARD_CONFIG;

//-------------------------------------------------------------------------
// Application Configuration
// All global variables are included in this structure
typedef struct _APPLICATION_CONFIG
{
	BOARD_CONFIG		gBC[MAX_BOARD_COUNT+1];                     // modulation varaible for each modulation mode
	int					nBoardSlotNum[MAX_BOARD_COUNT+1];	        // board is installed in n-th slot ? (-1: not exist) <PCI:0~22. USB case: 23~ (TSPL_GET_BOARD_LOCATION_EX)>
	int					nBoardRealSlot[MAX_BOARD_COUNT+1];	        // the slot number of nth existing(Combo_ADAPTOR) board
	char				gszScheduledTask[MAX_SCHEDULE_COUNT][1024]; // scheduled task string
	int					gnScheduledTask;							// 0~MAX_SCHEDULE_COUNT-1
	//2012/3/26
#ifndef WIN32
	int					gnCurSlotIndex;								// default 0: For LINUX
#endif

	char				gszInstalledBoard_Info[MAX_BOARD_COUNT+1][256];
	int					gnInstalledBoard_InitMode[MAX_BOARD_COUNT+1];
} APPLICATION_CONFIG;

typedef struct _TEL_GENERAL_VAR
{
	//--- from Form_ISDB_T
	long		gnSelectedBitrate[3];	        // bitrate of Layer A/B/C
	
	//--- from dlldecl
	long		gMultiLang;                     // Use of multi-language in UI
	long		gLCID;                          // Thread's current locale
	long		gFactoryDefault;                // Set factroy default mode

	//--- from main
	char		szStatusMessage[256];           // temporal buffer for status message	
	int			nConfirmPlaying;                // confirm to start playing.
	long		gnActiveBoardCount;             // # of installed TPG0590VC/595 board
	long		gnActiveBoard;                  // Current Selected Board Slot Index: 0~22
#ifdef WIN32
	__int64		gnTSCount[MAX_BOARD_COUNT+1];                      // TS count from SMPTE310M or DVB-ASI input
	long		gnLastSec[MAX_BOARD_COUNT+1];                      // the last time at which TS input comes in on SMPTE310M or DVB-ASI
	float		gnPlayRate[MAX_BOARD_COUNT+1][5];                  // variable to calculate bitrate of SMPTE310M/DVB-ASI input
#else
	__int64		gnTSCount;                      // TS count from SMPTE310M or DVB-ASI input
	long		gnLastSec;                      // the last time at which TS input comes in on SMPTE310M or DVB-ASI
	float		gnPlayRate[5];                  // variable to calculate bitrate of SMPTE310M/DVB-ASI input
#endif
	long		gnVLCRunning;				    //-1 : No IP streaming and A/V decoding, board #: IP streaming or A/V decoding
	
	//--- Front Key
	long		gMenuTag;
	long		gMenuIndex;
	long		gMenuCnt;

	//--- winsock
	SOCKET			gnRecevingSocket;           // SNMP command message receiving socket
	SOCKET			gnSendingSocket;            // SNMP status message sending socket
	long			gnlngBytesReceived;         // # of received SNMP command bytes
	
	long			gnBoardNum;                 // Bit pattern of board slot: bit0=slot0, bit1=slot1, ...
	long			gnBitrate;                  // stream playrate
	long			gnPacketSize;               // TS packet size
#ifndef WIN32
	__int64			gnDiskSize;                 // free disk size
#endif
	__int64			gnElapsedTime;              // elapsed time in units of seconds
	long			gnRunTime;                  // record size in seconds or duration of file
	
	bool			gnMultiBoardUsed;           // multiple application allowed or not

    char            gnStrCurDir[256];           // current directory (application directory)
    long            gnUserFreq[126];            // user channel frequency in Hz
    long            gnNumUserFreq;              // # of user channel

    char            gszSnmpRecv[256];           // temp buffer for SNMP command message
    char            gszSnmpSend[256];           // temp buffer for SNMP status message

	//kslee	Added
	//091219
	long			gnApplicationRunFlag;
	long			InputInit;
	//vlc1.0.4
	//kslee 2010/4/20
	//long			gnIP_Input_Bitrate[VLC_INPUT_BITRATE_CHECK_COUNT];
	//long			gnIP_Input_Bitrate_Count;
	//long			gnIP_Input_Bitrate_Flag;

	//kslee 2010/4/19
	//unsigned long   gnRegistry_write_count;
	
	//kslee 2010/4/27
	//long			gnRunCommandFlag;

	//kslee 2010/5/18
	char			gszAppVer[16];

	//kslee 2010/6/4
	long			StartInit;

	//2010/6/9
#ifndef WIN32
	long			gnT2MI_playrate;
#endif
	//2011/4/13
	long			gnChangeAdapt_Flag;
	//2011/4/21
	long			gnFirstInit;

	long			gnValid_PlayStop;
	long			gnPlay_AllBd;
	long			gnBoardIndex_autoplay;

	//2012/3/22
	int				gnRealBd_Cnt;
	int				gnVirBd_Cnt;
#ifdef WIN32
	int				gnSetParam_Asi;
	int				gnRearrange_flag;
	int				gnResizable_flag;
	int				gnResizeIndex;
	int				gnFrameSize;
	int				gnT2mi_StopFlag;
	int				gnOverFrequency;
	int				gnRetentionPeriod;
#else
	long			gnInputRate;				// for ASI/310M, -1: unlock.
	//kslee 2010/4/13
	int				gnLNOpt;

	char	 		gnGateway[32];
	char			gnSubnetMask[32];
	char			gnIpAddress[32];
	int				gnDhcpUse;
	
	//kslee 2010/4/29
	int				gndownflag;

	//2010/9/29
	__int64			gnSnmpElapsedTime;

	//2010/9/30
	char str_board_id_info[256];

	//2011/1/5 ISDB-T TMCC Setting
	char			gszPIDInfo[250];
	int				gnPIDCount;

	//2011/4/21 ISDB-S
	int				gnIsdbs_ts_id;
	//2012/1/12 USB/SDCARD MOUNT
#ifdef STANDALONE
	int				gnUsb_Status;
	int				gnSdcard_Status;
	int				gnSetSystemClock;
	int				gnRunTSparser;
#endif
#endif

} TEL_GENERAL_VAR;

//2012/8/7 SI/PID Improve
struct _TSPH_TS_NIT_INFO
{
	long network_PID;
	long NIT_Flag;
		// Set TSPH_TS_NIT_FLAG_CABLE_DELIVERY_SYSTEM_DESC_IN_TS Bit if cable_delivery_system_descriptor Exists in NIT
		// Set TSPH_TS_NIT_FLAG_SATELLITE_DELIVERY_SYSTEM_DESC_IN_TS Bit if satellite_delivery_system_descriptor Exists in NIT
		// Set TSPH_TS_NIT_FLAG_S2_SATELLITE_DELIVERY_SYSTEM_DESC_IN_TS Bit if s2_satellite_delivery_system_descriptor Exists in NIT
		// Set TSPH_TS_NIT_FLAG_TERRESTRIAL_DELIVERY_SYSTEM_DESC_IN_TS Bit if terrestrial_delivery_system_descriptor Exists in NIT
};

struct _TSPH_TS_PGM_ELMT_INFO
{
	char szStreamType[TSPH_TS_STREAM_TYPE_STR_MAX_SIZE];
		// long stream_type;
		// Formatted as "stream_type_string(stream_type)"
	long elementary_PID;
	long bit_rate;
};

struct _TSPH_TS_PGM_INFO
{
	long program_map_PID;
	long program_number;
	long PCR_PID;
	long bit_rate;
	long num_elmt_info;
	struct _TSPH_TS_PGM_ELMT_INFO *elmt_info;
};

struct _TSPH_TS_PID_INFO
{
	long PID;
		// Includes PID 0x1FFF of Null Packet
	char szPidDesc[TSPH_TS_PID_DESC_STR_MAX_SIZE];
		// long stream_type;
		// Formatted as "stream_type_string(stream_type)"
	long bit_rate;
	long layer_info;
		// Initialized to 0x1
	long scrambled;
};

struct _TSPH_TS_INFO
{
	long packet_size;
	long packet_count;
	long TEI_packet_count;
	long Flags;
		// Set TSPH_TS_FLAG_PAT_IN_TS Bit if PAT Exits in TS
		// Set TSPH_TS_FLAG_PMT_IN_TS Bit if PMT Exits in TS
		// Set TSPH_TS_FLAG_NIT_IN_TS Bit if NIT Exits in TS
		// Set TSPH_TS_FLAG_ALL_PMT_IN_TS Bit if All PMT w.r.t PAT Exits in TS
		// Set TSPH_TS_FLAG_PCR_IN_TS Bit if Delta PCR Available from TS
		// Set TSPH_TS_FLAG_OUT_OF_SYNC_IN_TS Bit if Out of Sync Exists in TS
	struct _TSPH_TS_NIT_INFO *nit_info;
		// NULL if Not Set TSPH_TS_FLAG_NIT_IN_TS Bit in Flag
	long num_pgm_info;
	struct _TSPH_TS_PGM_INFO *pgm_info;
		// NULL if num_pgm_info == 0
	long num_pid_info;
	struct _TSPH_TS_PID_INFO *pid_info;
		// NULL if num_pid_info == 0
};



#if 1 //original
// Begin Frequency , End Frequency, I Offset Avg, Q Offset Avg  
static int gDacValue_TVB590S_V_3_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  1,  -3},
	{100,  200,  2,  -3},
	{200,  300,  2,  -5},
	{300,  400,  2,  -7},
	{400,  500,  5,  -9},
	{500,  600,  4,  -12},
	{600,  700,  5,  -16},
	{700,  800,  4,  -19},
	{800,  900,  21, -11},
	{900,  1000, 16, -23},
	{1000, 1100, 12, -17},
	{1100, 1200, 21, -35},
	{1200, 1300, 12, -40},
	{1300, 1400, 16, -42},
	{1400, 1500, 11, -44},
	{1500, 1600, 21, -39},
	{1600, 1700, 25, -51},
	{1700, 1800, 30, -57},
	{1800, 1900, 38, -64},
	{1900, 2000, 34, -81},
	{2000, 2100, 38, -69},
	{2100, 2150, 50, -43}
};

static int gDacValue_TVB593_V_2_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0,  -2},
	{100,  200,  1,  -3},
	{200,  300,  2,  -3},
	{300,  400,  2,  -4},
	{400,  500,  2,  -7},
	{500,  600,  4,  -9},
	{600,  700,  3,  -14},
	{700,  800,  3,  -16},
	{800,  900,  8,  -14},
	{900,  1000, 11, -16},
	{1000, 1100, 15,  5},
	{1100, 1200, 10, -28},
	{1200, 1300, 9,  -31},
	{1300, 1400, 14, -48},
	{1400, 1500, 5,  -68},
	{1500, 1600, 9,  -69},
	{1600, 1700, 2,  -72},
	{1700, 1800, 3,  -68},
	{1800, 1900, 13, -73},
	{1900, 2000, 24, -66},
	{2000, 2100, 9,  -33},
	{2100, 2150, -3, -29}
};
static int gDacValue_TVB597_V_2_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0,  -2},
	{100,  200,  2,  -3},
	{200,  300,  3,  -4},
	{300,  400,  3,  -5},
	{400,  500,  3,  -7},
	{500,  600,  4,  -10},
	{600,  700,  5,  -15},
	{700,  800,  4,  -17},
	{800,  900,  9,  -16},
	{900,  1000, 12, -18},
	{1000, 1100, 20,  6},
	{1100, 1200, 11, -31},
	{1200, 1300, 10, -32},
	{1300, 1400, 16, -47},
	{1400, 1500, 7,  -70},
	{1500, 1600, 9,  -70},
	{1600, 1700, 4,  -71},
	{1700, 1800, 15, -64},
	{1800, 1900, 13, -73},
	{1900, 2000, 19, -112},
	{2000, 2100, 11, -38},
	{2100, 2150, 7,  -32}
};

static int gDacValue_TVB591S_V_1_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  -1,  -3},
	{100,  200,   0,  -5},
	{200,  300,   1,  -6},
	{300,  400,   1,  -9},
	{400,  500,   3,  -8},
	{500,  600,   3,  -17},
	{600,  700,   2,  -13},
	{700,  800,   2,  -17},
	{800,  900,  11,  -14},
	{900,  1000, 15,   8},
	{1000, 1100, 10,  -24},
	{1100, 1200,  3,  -46},
	{1200, 1300, 21,  -61},
	{1300, 1400, 15,  -38},
	{1400, 1500, 18,  -49},
	{1500, 1600,  1,  -51},
	{1600, 1700, 14,  -94},
	{1700, 1800, 25,  -119},
	{1800, 1900,  7,  -55},
	{1900, 2000,  8,  -41},
	{2000, 2100, 15,  -35},
	{2100, 2150,  5,  -24}
};

static int gDacValue_TVB591S_V_2_x[50][4] = {
	{0,   100,   -1,  -6},
	{100,  200,  -1,  -7},
	{200,  300,   0,  -11},
	{300,  400,   0,  -15},
	{400,  410,  -1,  -17},
	{410,  420,   0,  -12},
	{420,  430,   2,  -12},
	{430,  440,   2,  -13},
	{440,  450,   4,  -14},
	{450,  460,   6,  -15},
	{460,  470,   7,  -16},
	{470,  480,   4,  -16},
	{480,  490,   1,  -17},
	{490,  500,   0,  -18},
	{500,  510,   1,  -21},
	{510,  520,   2,  -20},
	{520,  530,   2,  -22},
	{530,  540,   1,  -22},
	{540,  550,   1,  -23},
	{550,  560,   1,  -26},
	{560,  570,   1,  -28},
	{570,  580,   2,  -28},
	{580,  590,   3,  -28},
	{590,  600,   3,  -28},
	{600,  700,   1,  -25},
	{700,  800,   5,  -32},
	{800,  810,   3,  -27},
	{810,  820,   5,  -27},
	{820,  830,   8,  -29},
	{830,  840,  11,  -30},
	{840,  850,  13,  -30},
	{850,  860,  14,  -25},
	{860,  870,  15,  -21},
	{870,  880,  16,  -16},
	{880,  890,  18,  -11},
	{890,  900,  21,  -4},
	{900,  1000, 36,  -29},
	{1000, 1100, 16,  -33},
	{1100, 1200, 15,  -67},
	{1200, 1300, 19,  -77},
	{1300, 1400, 15,  -95},
	{1400, 1500, 23,  -94},
	{1500, 1600, 23,  -88},
	{1600, 1700,  5,  -106},
	{1700, 1800, 17,  -120},
	{1800, 1900, -4,  -133},
	{1900, 2000, -12, -128},
	{2000, 2100, -3,  -125},
	{2100, 2150, 26,  -114},
	{  -1,   -1, -1,    -1}  
};

static int gDacValue_TVB593_V_3_x[50][4] = {
	{0,   100,  2,  -3},
	{100,  200,  3,  -4},
	{200,  300,  4,  -9},
	{300,  400,  2,  -12},
	{400,  410,   2,  -14},
	{410,  420,   3,  -12},
	{420,  430,   4,  -11},
	{430,  440,   4,  -9},
	{440,  450,   6,  -6},
	{450,  460,   9,  -7},
	{460,  470,   9,  -12},
	{470,  480,   6,  -16},
	{480,  490,   3,  -18},
	{490,  500,   2,  -19},
	{500,  510,   5,  -18},
	{510,  520,   6,  -16},
	{520,  530,   5,  -17},
	{530,  540,   4,  -19},
	{540,  550,   4,  -21},
	{550,  560,   4,  -24},
	{560,  570,   4,  -26},
	{570,  580,   5,  -25},
	{580,  590,   6,  -25},
	{590,  600,   7,  -26},
	{600,  700,  5,  -23},
	{700,  800,  6,  -30},
	{800,  810,  8,  -27},
	{810,  820,  11,  -28},
	{820,  830,  14,  -29},
	{830,  840,  15,  -30},
	{840,  850,  15,  -29},
	{850,  860,  15,  -22},
	{860,  870,  16,  -17},
	{870,  880,  17,  -10},
	{880,  890,  21,  -3},
	{890,  900,  28,  4},
	{900,  1000, 36, -34},
	{1000, 1100, 18, -36},
	{1100, 1200, 20, -54},
	{1200, 1300, 21, -81},
	{1300, 1400, 11, -91},
	{1400, 1500, 23, -107},
	{1500, 1600, 10, -98},
	{1600, 1700, 16, -96},
	{1700, 1800, 14, -136},
	{1800, 1900, -8, -112},
	{1900, 2000, -3, -107},
	{2000, 2100, 6,  -150},
	{2100, 2150, 45, -129},
	{  -1,   -1, -1,   -1}  
};
static int gDacValue_TVB597_V_3_x[50][4] = {
	{0,   100,  2,  -4},
	{100,  200,  2,  -6},
	{200,  300,  2,  -10},
	{300,  400,  1,  -14},
	{400,  410,   2,  -15},
	{410,  420,   3,  -14},
	{420,  430,   3,  -12},
	{430,  440,   3,  -10},
	{440,  450,   5,  -8},
	{450,  460,   9,  -8},
	{460,  470,   8,  -13},
	{470,  480,   5,  -17},
	{480,  490,   2,  -18},
	{490,  500,   1,  -19},
	{500,  510,   3,  -20},
	{510,  520,   4,  -19},
	{520,  530,   4,  -19},
	{530,  540,   3,  -20},
	{540,  550,   3,  -21},
	{550,  560,   3,  -24},
	{560,  570,   4,  -26},
	{570,  580,   4,  -27},
	{580,  590,   4,  -27},
	{590,  600,   5,  -27},
	{600,  700,  3,  -25},
	{700,  800,  2,  -31},
	{800,  810,  7,  -28},
	{810,  820,  10,  -27},
	{820,  830,  13,  -27},
	{830,  840,  15,  -29},
	{840,  850,  16,  -28},
	{850,  860,  15,  -22},
	{860,  870,  15,  -18},
	{870,  880,  16,  -12},
	{880,  890,  19,  -6},
	{890,  900,  25,  0},
	{900,  1000, 32,  -27},
	{1000, 1100, 14,  -45},
	{1100, 1200, 16,  -59},
	{1200, 1300, 24,  -82},
	{1300, 1400, 7,  -95},
	{1400, 1500, 23,  -112},
	{1500, 1600, 8,  -107},
	{1600, 1700, 10,  -98},
	{1700, 1800, 15,  -145},
	{1800, 1900, -11,  -137},
	{1900, 2000, -8,  -113},
	{2000, 2100, 4,  -156},
	{2100, 2150, 26,  -136},
	{  -1,   -1, -1,    -1}  
};
static int gDacValue_TVB597_V_4_x[50][4] = {
	{0,   100,			3,-4},
	{100,  200,		3,-6},
	{200,  300,		4,-9},
	{300,  400,		3,-13},
	{400,  410,		3,-14},
	{410,  420,		4,-13},
	{420,  430,		5,-12},
	{430,  440,		5,-11},
	{440,  450,		6,-9},
	{450,  460,		9,-9},
	{460,  470,		10,-11},
	{470,  480,		7,-15},
	{480,  490,		5,-16},
	{490,  500,		3,-17},
	{500,  510,		5,-18},
	{510,  520,		6,-18},
	{520,  530,		6,-19},
	{530,  540,		5,-20},
	{540,  550,		5,-20},
	{550,  560,		5,-22},
	{560,  570,		5,-25},
	{570,  580,		5,-26},
	{580,  590,		5,-26},
	{590,  600,		6,-26},
	{600,  700,		5,-24},
	{700,  800,		5,-30},
	{800,  810,		7,-28},
	{810,  820,		9,-26},
	{820,  830,		12,-25},
	{830,  840,		16,-24},
	{840,  850,		18,-24},
	{850,  860,		19,-22},
	{860,  870,		19,-21},
	{870,  880,		20,-17},
	{880,  890,		22,-13},
	{890,  900,		25,-9},
	{900,  1000,	38,-19},
	{1000, 1100, 21,-46},
	{1100, 1200,	10,-57},
	{1200, 1300,	30,-76},
	{1300, 1400, 13,-97},
	{1400, 1500, 35,-109},
	{1500, 1600, 25,-108},
	{1600, 1700, 1,-95},
	{1700, 1800, 25,-139},
	{1800, 1900, -8,-131},
	{1900, 2000, -5,-115},
	{2000, 2100, 11,-141},
	{2100, 2150, 34,-155},
	{  -1,   -1, -1,   -1}  
};

static int gDacValue_TVB499_V_1_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};

static int gDacValue_TVB593_V_4_x[50][4] = {
	{0,   100,			1,  -4},
	{100,  200,		1,  -4},
	{200,  300,		2,  -9},
	{300,  400,		0,  -12},
	{400,  410,		1,  -14},
	{410,  420,		1,  -13},
	{420,  430,		2,  -11},
	{430,  440,		3,  -9},
	{440,  450,		5,  -6},
	{450,  460,		8,  -6},
	{460,  470,		8,  -12},
	{470,  480,		5,  -15},
	{480,  490,		2,  -16},
	{490,  500,		1,  -18},
	{500,  510,		3,  -18},
	{510,  520,		3,  -18},
	{520,  530,		3,  -17},
	{530,  540,		2,  -17},
	{540,  550,		1,  -19},
	{550,  560,		1,  -22},
	{560,  570,		2,  -26},
	{570,  580,		2,  -26},
	{580,  590,		3,  -25},
	{590,  600,		5,  -24},
	{600,  700,		2,  -22},
	{700,  800,		4,  -30},
	{800,  810,		4,  -25},
	{810,  820,		6,  -24},
	{820,  830,		10,  -24},
	{830,  840,		13,  -26},
	{840,  850,		15,  -27},
	{850,  860,		15,  -22},
	{860,  870,		15,  -18},
	{870,  880,		15,  -12},
	{880,  890,		17,  -4},
	{890,  900,		22,  2},
	{900,  1000,	36, -30},
	{1000, 1100, 14, -39},
	{1100, 1200,	9, -53},
	{1200, 1300,	19, -79},
	{1300, 1400, 8, -89},
	{1400, 1500, 27, -107},
	{1500, 1600, 6, -103},
	{1600, 1700, -4, -74},
	{1700, 1800, 14, -133},
	{1800, 1900, -16, -113},
	{1900, 2000, -16, -102},
	{2000, 2100, -5,  -138},
	{2100, 2150, 26, -126},
	{  -1,   -1, -1,   -1}  
};

static int gDacValue_TVB599[68][4] = {
	{0,   100,			2,-3},
	{100,  200,		3,-4},
	{200,  300,		3,-7},
	{300,  400,		2,-11},
	{400,  410,		3,-12},
	{410,  420,		3,-10},
	{420,  430,		4,-10},
	{430,  440,		4,-9},
	{440,  450,		5,-9},
	{450,  460,		5,-9},
	{460,  470,		5,-11},
	{470,  480,		4,-12},
	{480,  490,		3,-13},
	{490,  500,		3,-14},
	{500,  510,		5,-14},
	{510,  520,		5,-14},
	{520,  530,		5,-16},
	{530,  540,		5,-17},
	{540,  550,		4,-18},
	{550,  560,		4,-20},
	{560,  570,		3,-22},
	{570,  580,		3,-23},
	{580,  590,		3,-24},
	{590,  600,		3,-24},
	{600,  610,		3,-24},
	{610,  620,		3,-24},
	{620,  630,		2,-24},
	{630,  640,		3,-23},
	{640,  650,		3,-22},
	{650,  660,		4,-21},
	{660,  670,		5,-21},
	{670,  680,		7,-21},
	{680,  690,		8,-21},
	{690,  700,		7,-21},
	{700,  710,		6,-21},
	{710,  720,		5,-21},
	{720,  730,		5,-22},
	{730,  740,		4,-23},
	{740,  750,		4,-23},
	{750,  760,		4,-24},
	{760,  770,		4,-24},
	{770,  780,		5,-24},
	{780,  790,		7,-24},
	{790,  800,		10,-24},
	{800,  810,		12,-24},
	{810,  820,		13,-22},
	{820,  830,		15,-21},
	{830,  840,		15,-21},
	{840,  850,		16,-20},
	{850,  860,		17,-17},
	{860,  870,		18,-16},
	{870,  880,		20,-15},
	{880,  890,		22,-14},
	{890,  900,		24,-13},
	{900,  1000,	23,-19},
	{1000, 1100, 17,-28},
	{1100, 1200,	19,-62},
	{1200, 1300,	16,-72},
	{1300, 1400, 12,-79},
	{1400, 1500, 15,-98},
	{1500, 1600, 18,-92},
	{1600, 1700, 27,-96},
	{1700, 1800, 7,-108},
	{1800, 1900, -11,-124},
	{1900, 2000, -24,-119},
	{2000, 2100, 1,-123},
	{2100, 2150, 6,-108},
	{  -1,   -1, -1,   -1}  
};




































































#else
static int gDacValue_TVB590S_V_3_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};

static int gDacValue_TVB593_V_2_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};
static int gDacValue_TVB597_V_2_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};

static int gDacValue_TVB591S_V_1_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};
static int gDacValue_TVB591S_V_2_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};
static int gDacValue_TVB593_V_3_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};
static int gDacValue_TVB597_V_3_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};
static int gDacValue_TVB499_V_1_x[MAX_DAC_FREQ_RANGE][4] = {
	{48,   100,  0, 0},
	{100,  200,  0, 0},
	{200,  300,  0, 0},
	{300,  400,  0, 0},
	{400,  500,  0, 0},
	{500,  600,  0, 0},
	{600,  700,  0, 0},
	{700,  800,  0, 0},
	{800,  900,  0, 0},
	{900,  1000, 0, 0},
	{1000, 1100, 0, 0},
	{1100, 1200, 0, 0},
	{1200, 1300, 0, 0},
	{1300, 1400, 0, 0},
	{1400, 1500, 0, 0},
	{1500, 1600, 0, 0},
	{1600, 1700, 0, 0},
	{1700, 1800, 0, 0},
	{1800, 1900, 0, 0},
	{1900, 2000, 0, 0},
	{2000, 2100, 0, 0},
	{2100, 2150, 0, 0}
};
#endif
#endif  //_TELVIEW_VARIABLE_H_

